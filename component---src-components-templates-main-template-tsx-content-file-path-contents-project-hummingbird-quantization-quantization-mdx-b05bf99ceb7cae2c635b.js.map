{"version":3,"file":"component---src-components-templates-main-template-tsx-content-file-path-contents-project-hummingbird-quantization-quantization-mdx-b05bf99ceb7cae2c635b.js","mappings":"yLAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,8BAA+B,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,2PAA4P,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,CAC5cM,GAAI,QACH,QAAS,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,iFAAkF,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,CACrLM,GAAI,qBACH,qBAAsB,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,4KAA6K,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC1UK,UAAW,mBACV,4bAA6b,KAAMF,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,qDAAsD,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gIAAiI,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACx1BK,UAAW,mBACV,giBAAiiB,KAAMF,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,4CAA6C,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,6IAA8I,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACh8BK,UAAW,mBACV,mLAAoL,KAAMF,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,2CAA4C,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,wIAAyI,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,kHAAmH,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC/uBK,UAAW,mBACV,8RAA+R,KAAMF,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,4kCAA6kC,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uLAAwL,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,CAC3tDM,GAAI,oBACH,oBAAqB,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,+GAAgH,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC5QK,UAAW,mBACV,6wCAA8wC,KAAMF,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,4JAA6J,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACljDK,UAAW,mBACV,i9CAAk9C,KAAMF,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,qGAAsG,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC/rDK,UAAW,mBACV,gyEACL,CAKA,MAJA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWd,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,mLCVA,MAAMe,EAAeC,IACnB,IAAKC,MAAM,IAACC,GAAI,SAAEC,GAAYH,EAC9B,MAAMI,GAASC,EAAAA,EAAAA,KAAeC,EAAAA,EAAAA,IAAWC,EAAAA,IAAa,IAChDC,GAAcH,EAAAA,EAAAA,KAAeC,EAAAA,EAAAA,IAAWG,EAAAA,IAAY,IACpDC,GAAYC,EAAAA,EAAAA,KAAkBL,EAAAA,EAAAA,IAAWM,EAAAA,GAAsBV,EAAIW,gBAAgBC,QAIzF,OAHAC,EAAAA,EAAAA,YAAU,KACRL,EAAUR,EAAIW,gBAAgBC,MAAM,GACnC,CAACZ,KACGc,EAAAA,EAAAA,IAAcC,EAAAA,EAAQ,MAAMD,EAAAA,EAAAA,IAAcE,EAAiB,MAAMF,EAAAA,EAAAA,IAAcG,EAAAA,EAAQ,QAAQH,EAAAA,EAAAA,IAAcI,EAAe,MAAMJ,EAAAA,EAAAA,IAAcK,EAAqB,CAC1KzB,UAAW,aACXY,YAAaA,IACZQ,EAAAA,EAAAA,IAAcM,EAAO,CACtB1B,UAAW,gBACVoB,EAAAA,EAAAA,IAAcO,EAAAA,EAAY,SAASP,EAAAA,EAAAA,IAAcQ,EAAkB,CACpEhB,YAAaA,IACZQ,EAAAA,EAAAA,IAAcS,EAAgB,CAC/BrB,OAAQA,IACPY,EAAAA,EAAAA,IAAcU,EAAAA,EAAc,CAC7BC,MAAOzB,EAAI0B,YAAYD,MACvBE,KAAM3B,EAAI0B,YAAYC,QACpBb,EAAAA,EAAAA,IAAcc,EAAAA,GAAa,CAC7BrC,WAAY,CACVL,EAAG2C,EAAAA,EACH1C,GAAI2C,EAAAA,GACJC,GAAIC,EAAAA,GACJC,GAAIC,EAAAA,GACJC,GAAIC,EAAAA,GACJC,GAAIC,EAAAA,GACJC,GAAIC,EAAAA,GACJC,GAAIC,EAAAA,EACJC,WAAYC,EAAAA,EACZC,GAAIC,EAAAA,EACJC,GAAIC,EAAAA,EACJ5D,IAAK6D,EAAAA,EACL5D,KAAM6D,EAAAA,IAEPjD,MAAaa,EAAAA,EAAAA,IAAcqC,EAAgB,MAAMrC,EAAAA,EAAAA,IAAcsC,EAAY,MAAMtC,EAAAA,EAAAA,IAAcuC,EAAAA,EAAgB,SAAS,EAGvHrC,GAAkBsC,EAAAA,EAAAA,GAAQ,MAA+C,CAC7EC,OAAQ,aADcD,CAKmB,CACzCE,KAAM,UACNC,OAAQ,kMAOJvC,GAAgBoC,EAAAA,EAAAA,GAAQ,MAA+C,CAC3EC,OAAQ,aADYD,CAKqB,CACzCE,KAAM,SACNC,OAAQ,mGAOJtC,GAAsBmC,EAAAA,EAAAA,GAAQ,QAAiD,CACnFC,OAAQ,aADkBD,CAKzB,gBAAgBpE,GAAKA,EAAEoB,YAAc,IAAM,mCAAmC,0JAA2JoD,EAAAA,EAAUC,SAAU,uBAC1PvC,GAAQkC,EAAAA,EAAAA,GAAQ,MAA+C,CACnEC,OAAQ,aADID,CAK6B,CACzCE,KAAM,SACNC,OAAQ,sJAOJlC,GAAiB+B,EAAAA,EAAAA,GAAQ,OAAgD,CAC7EC,OAAQ,aADaD,CAKpB,8CAA+CI,EAAAA,EAAUE,SAAU,cAAc1E,GAAKA,EAAEgB,OAAS,MAAQ,OAAO,MAC7GoB,GAAmBgC,EAAAA,EAAAA,GAAQ,OAAgD,CAC/EC,OAAQ,aADeD,CAKtB,4JAA4JpE,GAAKA,EAAEoB,YAAc,GAAM,GAAG,uBAAwBoD,EAAAA,EAAUC,SAAU,mBACnOR,GAAiBG,EAAAA,EAAAA,GAAQ,QAAiD,CAC9EC,OAAQ,aADaD,CAKpB,sLAAuLI,EAAAA,EAAUG,GAAI,oCAClMT,GAAaE,EAAAA,EAAAA,GAAQlC,EAA+C,CACxEmC,OAAQ,aADSD,CAKwB,CACzCE,KAAM,SACNC,OAAQ,0BAQK,SAASK,EAAiBhF,GACvC,OAAOU,EAAAA,cAAoBK,EAAcf,EAAOU,EAAAA,cAAoBuE,EAAqBjF,GAC3F,C","sources":["webpack://yeti-docs/./contents/project/hummingbird/quantization/quantization.mdx","webpack://yeti-docs/./src/components/templates/MainTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport * as Elem from '@elements';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"프로젝트에서 사용될 언어 모델의 규모가 너무 커\"), \"\\n\", React.createElement(_components.p, null, \"기존에 연구하기 위해 사용해본 torch.quantization 모듈은 추론시 GPU를 사용할 수 없다는 단점이 있었습니다.\\r\\n이를 해결하기 위해 ONNX를 활용할 수 있을 것입니다.\\r\\n먼저 Pytorch를 활용하여 Activation과 Weight에 대한 Scale을 진행하는 Layer를 생성하고, ONNX로 변환하여 Quantization을 진행합니다.\\r\\n그리고 GPU로 불러와서 추론을 진행하는 방식으로 해결해볼 생각입니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"onnx\"\n  }, \"ONNX\"), \"\\n\", React.createElement(_components.p, null, \"어쩌면 ONNX에서 모듈을 수정할 수 있을 것 같아서 먼저 ONNX가 무엇인지, Pytorch와는 어떤 관계인지 알고 가야할 것 같습니다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"onnx-quantization\"\n  }, \"ONNX Quantization\"), \"\\n\", React.createElement(_components.p, null, \"위 방법을 실행하기 전에 Scaling을 진행하는 레이어에 대해서는 Quantization이 진행되지 않아야 하는 것을 확인해야 합니다.\\r\\n또 pytorch 모델을 onnx로 변환하고 이를 Quantization 하여 추론하는 방법을 알아야 하죠.\\r\\n간단한 모델을 활용해서 테스트를 해보자구요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import torch\\r\\nimport torch.nn as nn\\r\\n\\r\\nclass CustomModule(nn.Module):\\r\\n    def __init__(self) -> None:\\r\\n        super().__init__()\\r\\n        self.register_buffer('scale', torch.tensor(100))\\r\\n        self.fc = nn.Linear(1024, 1)\\r\\n    \\r\\n    def forward(self, x):\\r\\n        x = x * self.scale\\r\\n        return self.fc(x)\\r\\n        \\r\\ncustom = CustomModule()\\r\\ndummy_input = torch.rand((1, 1024))\\r\\ncustom(dummy_input)\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"tensor([[-42.1489]], grad_fn=<AddmmBackward0>)\\n\")), \"\\n\", React.createElement(_components.p, null, \"먼저 SmoothQuant의 레이어와 같이 입력에 Scaling을 적용한 후 연산을 진행하는 방법으로 간단한 모델을 구현해봤습니다.\\r\\nDummy 입력을 모델에 넣었더니, 52.9578 이라는 결과를 얻을 수 있었습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import onnxruntime as ort\\r\\nimport numpy as np\\r\\n\\r\\ninput_names = ['x']\\r\\noutput_names = ['y']\\r\\ntorch.onnx.export(\\r\\n    custom,\\r\\n    dummy_input,\\r\\n    verbose=True,\\r\\n    f='tmp/custom_model.onnx',\\r\\n    input_names=input_names,\\r\\n    output_names=output_names,\\r\\n)\\r\\n\\r\\ndef infer_onnx_model(model_path):\\r\\n    session = ort.InferenceSession(model_path)\\r\\n    input_name = session.get_inputs()[0].name\\r\\n    return session.run(None, {input_name: dummy_input.numpy()})\\r\\n\\r\\ninfer_onnx_model('tmp/custom_model.onnx')\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[array([[-42.14892]], dtype=float32)]\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 이 모델을 ONNX로 변환하였습니다.\\r\\n변환시 입력의 크기를 알기 위해 Dummy Input을 요구하더라구요.\\r\\n이후 변환된 ONNX 파일을 불러와 추론을 하였습니다.\\r\\nPyTorch 모델과 같은 결과를 얻는 것을 볼 수 있었죠.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from onnxruntime.quantization import quantize_dynamic\\r\\nquantize_dynamic('tmp/custom_model.onnx', 'tmp/q_custom_model.onnx')\\r\\ninfer_onnx_model('tmp/q_custom_model.onnx')\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[array([[-40.4947]], dtype=float32)]\\n\")), \"\\n\", React.createElement(_components.p, null, \"Dynamic Quantization을 사용하여 모델을 변환하고 이를 같은 입력에 대해 추론을 진행하였습니다.\\r\\n기존 결과와 약간 달라지는 것을 볼 수 있었죠.\\r\\n아무튼 이런 방식으로 Quantization을 적용할 수 있겠네요.\"), \"\\n\", React.createElement(_components.p, null, \"그런데 과연 우리가 원하는 대로 Non-Learnable Parameter에 대해서도 양자화가 진행되는지 확인할 필요가 있을 것 같습니다.\\r\\n그래야 SmoothQuant를 적용할 수 있으니까요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import onnx\\r\\n\\r\\nonnx_model = onnx.load('tmp/q_custom_model.onnx')\\r\\ngraph_def = onnx_model.graph\\r\\n\\r\\nfor node in graph_def.node:\\r\\n    print('name:', node.name)\\r\\n    print('op_type:', node.op_type)\\r\\n    print('input:', node.input)\\r\\n    print('output:', node.output)\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"name: /Mul\\r\\nop_type: Mul\\r\\ninput: ['x', 'onnx::Mul_7']\\r\\noutput: ['/Mul_output_0']\\r\\n\\r\\nname: /Mul_output_0_QuantizeLinear\\r\\nop_type: DynamicQuantizeLinear\\r\\ninput: ['/Mul_output_0']\\r\\noutput: ['/Mul_output_0_quantized', '/Mul_output_0_scale', '/Mul_output_0_zero_point']\\r\\n\\r\\nname: /fc/Gemm_MatMul_quant_scales_mul\\r\\nop_type: Mul\\r\\ninput: ['/Mul_output_0_scale', 'fc.weight_scale']\\r\\noutput: ['/fc/Gemm_MatMul_quant_scales_mul:0']\\r\\n\\r\\nname: /fc/Gemm_MatMul_quant\\r\\nop_type: MatMulInteger\\r\\ninput: ['/Mul_output_0_quantized', 'fc.weight_quantized', '/Mul_output_0_zero_point', 'fc.weight_zero_point']\\r\\noutput: ['y_MatMul_output_quantized']\\r\\n\\r\\nname: y_MatMul_output_quantized_cast\\r\\nop_type: Cast\\r\\ninput: ['y_MatMul_output_quantized']\\r\\noutput: ['y_MatMul_output_quantized_cast_output']\\r\\n\\r\\n\\r\\nname: /fc/Gemm_MatMul_quant_output_scale_mul\\r\\nop_type: Mul\\r\\ninput: ['y_MatMul_output_quantized_cast_output', '/fc/Gemm_MatMul_quant_scales_mul:0']\\r\\noutput: ['y_MatMul']\\r\\n\\r\\nname: /fc/Gemm_Add\\r\\nop_type: Add\\r\\ninput: ['y_MatMul', 'fc.bias']\\r\\noutput: ['y']\\n\")), \"\\n\", React.createElement(_components.p, null, \"결과를 보니 CustomModule에서 설정한 scale 값을 양자화 없이 입력 x에 곱하고난 후 Linear 레이어에 넣는 것을 확인할 수 있습니다.\\r\\n아마 ONNX에서 미리 지정해둔 형식의 레이어에 대해서만 Quantization을 진행하는 것 같아요.\\r\\nSmoothQuant를 적용하는 것이 어렵지 않겠네요.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"onnx-smoothquant\"\n  }, \"ONNX SmoothQuant\"), \"\\n\", React.createElement(_components.p, null, \"위와 같은 방식으로 ONNX에서 SmoothQuant를 적용하여 GPU를 이용한 추론을 진행할 수 있다는 것을 보았습니다.\\r\\n그렇다면 실제로 BERT 모델에 적용하여 테스트를 진행해볼게요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from datasets import load_dataset\\r\\nfrom transformers import BertTokenizer, BertForSequenceClassification\\r\\nfrom torch.utils.data import DataLoader, TensorDataset\\r\\n\\r\\nimport torch\\r\\nimport torch.nn as nn\\r\\nimport numpy as np\\r\\n\\r\\nimport onnxruntime as ort\\r\\n\\r\\nMODEL_NAME = 'yoshitomo-matsubara/bert-large-uncased-qnli'\\r\\nMAX_LENGTH = 256\\r\\nBATCH_SIZE = 8\\r\\n\\r\\nmodel = BertForSequenceClassification.from_pretrained(MODEL_NAME)\\r\\ntokenizer = BertTokenizer.from_pretrained(MODEL_NAME)\\r\\ndataset = load_dataset('glue', 'qnli', split=['test', 'validation'])\\r\\ndef tokenize(data):\\r\\n    return tokenizer(data['question'], data['sentence'], truncation=True, max_length=MAX_LENGTH, padding='max_length', return_tensors='pt')\\r\\n\\r\\ndef create_dataloader(dataset, batch_size):\\r\\n    input_ids = torch.tensor(dataset['input_ids'])\\r\\n    attention_masks = torch.tensor(dataset['attention_mask'])\\r\\n    token_type_ids = torch.tensor(dataset['token_type_ids'])\\r\\n    tensor_dataset = TensorDataset(input_ids, attention_masks, token_type_ids)\\r\\n    return DataLoader(tensor_dataset, batch_size = batch_size)\\r\\n\\r\\ntest_dataloader = create_dataloader(tokenize(dataset[0][:1000]), BATCH_SIZE)\\r\\nval_dataloader = create_dataloader(tokenize((dataset[1][:500])), BATCH_SIZE)\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"SmoothQuant가 작은 모델에 대해서 좋은 성능을 내지 못하지만,\\r\\n예전에 테스트를 진행했던 BERT-Large 모델의 QNLI 작업은 SmoothQuant를 적용하였을 때 기존의 Quantization 방식보다 더 높은 정확도를 보여주었기에 이를 활용하겠습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"@torch.no_grad()\\r\\ndef predict(model, dataloader, device=torch.device('cuda')):\\r\\n    model.to(device)\\r\\n    model.eval()\\r\\n    \\r\\n    preds = []\\r\\n    for _, batch in enumerate(dataloader):\\r\\n        batch_inputs = tuple(t.to(device) for t in batch)\\r\\n        inputs = {\\r\\n            'input_ids': batch_inputs[0],\\r\\n            'attention_mask': batch_inputs[1],\\r\\n            'token_type_ids': batch_inputs[2]\\r\\n        }\\r\\n        \\r\\n        outputs = model(**inputs)\\r\\n        preds.append(outputs[0].argmax(dim=1))\\r\\n    \\r\\n    preds = torch.cat(preds)\\r\\n    return preds\\r\\n\\r\\npreds = predict(model, test_dataloader).cpu().numpy()\\r\\n\\r\\ndef to_onnx(model, onnx_file):\\r\\n    model.cpu() \\r\\n    dummy_input = tokenizer(\\\"This is a sample sentence\\\", return_tensors=\\\"pt\\\")\\r\\n    input_names = ['input_ids', 'attention_mask', 'token_type_ids']\\r\\n    output_names = ['logits']\\r\\n    dynamic_axes={'input_ids': {0: 'batch_size', 1: 'sequence'}, \\r\\n                'attention_mask': {0: 'batch_size', 1: 'sequence'},\\r\\n                'token_type_ids': {0: 'batch_size', 1: 'sequence'}, \\r\\n                'logits': {0: 'batch_size', 1: 'sequence'}}\\r\\n\\r\\n    torch.onnx.export(\\r\\n        model,\\r\\n        tuple(dummy_input.values()),\\r\\n        verbose=True,\\r\\n        f=onnx_file,\\r\\n        input_names=input_names,\\r\\n        output_names=output_names,\\r\\n        dynamic_axes=dynamic_axes,\\r\\n    )\\r\\n\\r\\nto_onnx(model, 'bert/bert-large.onnx')\\n\")), \"\\n\", React.createElement(_components.p, null, \"ONNX 모델과 비교를 하기 위해 test 데이터를 통해 추론을 진행하였습니다.\\r\\n또 모델을 기본적인 Quantization 방법을 적용하여 테스트한 결과와 비교하기 위해\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from functools import partial\\r\\n\\r\\ndef get_act_scales(model):\\r\\n    model.eval()\\r\\n    act_scales = {}\\r\\n\\r\\n    # get maximum channel values\\r\\n    def stat_tensor(name, tensor):\\r\\n        hidden_dim = tensor.shape[-1]\\r\\n        tensor = tensor.view(-1, hidden_dim).abs().detach()\\r\\n        comming_max = torch.max(tensor, dim=0)[0].float().cpu()\\r\\n        if name in act_scales:\\r\\n            act_scales[name] = torch.max(act_scales[name], comming_max)\\r\\n        else:\\r\\n            act_scales[name] = comming_max\\r\\n\\r\\n    def stat_input_hook(m, x, y, name):\\r\\n        if isinstance(x, tuple):\\r\\n            x = x[0]\\r\\n            stat_tensor(name, x)\\r\\n        \\r\\n    # register hook on every Linear layer\\r\\n    hooks = []\\r\\n    for name, m in model.named_modules():\\r\\n        if isinstance(m, nn.Linear):\\r\\n            hooks.append(\\r\\n                m.register_forward_hook(\\r\\n                    partial(stat_input_hook, name=name))\\r\\n            )\\r\\n    \\r\\n    predict(model, val_dataloader)\\r\\n    \\r\\n    # remove hooks\\r\\n    for h in hooks:\\r\\n        h.remove()\\r\\n    \\r\\n    return act_scales\\r\\n\\r\\nact_scales = get_act_scales(model, val_dataloader)\\r\\n\\r\\nclass SmoothLinear(nn.Module):\\r\\n    def __init__(self, linear, act_scale, alpha=0.5) -> None:\\r\\n        super().__init__()\\r\\n        weight = linear.weight.detach()\\r\\n        w_abs_max = weight.abs().max(dim=0)[0].clamp_(min=1e-5)\\r\\n        scale = act_scale.pow(alpha).div_(w_abs_max.pow(1 - alpha)).clamp_(min=1e-5)\\r\\n        linear.weight.data = weight * scale\\r\\n        \\r\\n        self.register_buffer(\\\"scale\\\", scale)\\r\\n        self.linear = linear\\r\\n        \\r\\n    def forward(self, x):\\r\\n        x = x / self.scale\\r\\n        return self.linear(x)\\r\\n\\r\\ndef smooth_quantize(model, act_scales):\\r\\n    model.cpu()\\r\\n    for name, act_scale in act_scales.items():\\r\\n        keys = name.split(\\\".\\\")\\r\\n        module = model\\r\\n        for key in keys[:-1]:\\r\\n            module = getattr(module, key)\\r\\n        \\r\\n        if 'query' in name or 'key' in name or 'value' in name or 'intermediate' in name:\\r\\n            setattr(module, keys[-1], SmoothLinear(getattr(module, keys[-1]), act_scale))\\r\\n            \\r\\nsmooth_quantize(model, act_scales)\\r\\n\\r\\nto_onnx(model, 'bert/bert-large-smooth.onnx')\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/yeti/Documents/github/docs/contents/project/hummingbird/quantization/quantization.mdx\";\nimport _styled from \"@emotion/styled/base\";\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nimport React, {useEffect} from \"react\";\nimport Layout from \"@src/Layout\";\nimport Navigation from \"@src/components/organisms/navigation/Navigation\";\nimport TableOfContent from \"@src/components/organisms/toc/TableOfContent\";\nimport Header from \"@src/components/organisms/header/Header\";\nimport ContentTitle from \"@src/components/organisms/content/ContentTitle\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport {createAtom, TOGGLE_WIDE, TOGGLE_NAV, SET_TABLE_OF_CONTENT} from \"@src/context/atoms\";\nimport MediaSize from \"@src/styles/media\";\nimport 'katex/dist/katex.min.css';\nimport 'gatsby-remark-link-beautify/themes/notion.css';\nimport P from \"@src/components/mdx/Paragraph\";\nimport {H1, H2, H3, H4, H5, H6} from \"@src/components/mdx/Heading\";\nimport ThematicBreak from \"@src/components/mdx/ThematicBreak\";\nimport Blockquote from \"@src/components/mdx/Blockquote\";\nimport List from \"@src/components/mdx/List\";\nimport UnorderedList from \"@src/components/mdx/UnorderedList\";\nimport CodeBlock from \"@src/components/mdx/CodeBlock\";\nimport Code from \"@src/components/mdx/Code\";\nimport {jsx as ___EmotionJSX} from \"@emotion/react\";\nconst MainTemplate = _ref => {\n  let {data: {mdx}, children} = _ref;\n  const isWide = useRecoilValue(createAtom(TOGGLE_WIDE, false));\n  const isNavOpened = useRecoilValue(createAtom(TOGGLE_NAV, false));\n  const tocSetter = useSetRecoilState(createAtom(SET_TABLE_OF_CONTENT, mdx.tableOfContents.items));\n  useEffect(() => {\n    tocSetter(mdx.tableOfContents.items);\n  }, [mdx]);\n  return ___EmotionJSX(Layout, null, ___EmotionJSX(HeaderInterface, null, ___EmotionJSX(Header, null)), ___EmotionJSX(BodyInterface, null, ___EmotionJSX(NavigationInterface, {\n    className: \"navigation\",\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(Fixer, {\n    className: \"hide_scroll\"\n  }, ___EmotionJSX(Navigation, null))), ___EmotionJSX(ContentInterface, {\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(ContentWrapper, {\n    isWide: isWide\n  }, ___EmotionJSX(ContentTitle, {\n    title: mdx.frontmatter.title,\n    date: mdx.frontmatter.date\n  }), ___EmotionJSX(MDXProvider, {\n    components: {\n      p: P,\n      h1: H1,\n      h2: H2,\n      h3: H3,\n      h4: H4,\n      h5: H5,\n      h6: H6,\n      hr: ThematicBreak,\n      blockquote: Blockquote,\n      ul: UnorderedList,\n      ol: List,\n      pre: CodeBlock,\n      code: Code\n    }\n  }, children))), ___EmotionJSX(TableInterface, null, ___EmotionJSX(TableFixer, null, ___EmotionJSX(TableOfContent, null)))));\n};\nconst query = \"1875222860\";\nconst HeaderInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j7\"\n} : {\n  target: \"e1ojob7j7\",\n  label: \"HeaderInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\"\n} : {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst BodyInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j6\"\n} : {\n  target: \"e1ojob7j6\",\n  label: \"BodyInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\"\n} : {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst NavigationInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j5\"\n} : {\n  target: \"e1ojob7j5\",\n  label: \"NavigationInterface\"\n})(\"margin-left:\", p => p.isNavOpened ? '0' : 'calc(-1 * var(--sidebar-width))', \";flex:0 0 var(--sidebar-width);font-size:0.875rem;overflow-x:hidden;overflow-y:auto;transition:margin 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.IPAD_PRO, \"px){margin-left:0;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst Fixer = _styled(\"nav\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j4\"\n} : {\n  target: \"e1ojob7j4\",\n  label: \"Fixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\"\n} : {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst ContentWrapper = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j3\"\n} : {\n  target: \"e1ojob7j3\",\n  label: \"ContentWrapper\"\n})(\"padding:1rem;width:100%;@media (min-width: \", MediaSize.IPAD_AIR, \"px){width:\", p => p.isWide ? '90%' : '65%', \";}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xceWV0aVxcRG9jdW1lbnRzXFxnaXRodWJcXGRvY3NcXHNyY1xcY29tcG9uZW50c1xcdGVtcGxhdGVzXFxNYWluVGVtcGxhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStKc0QiLCJmaWxlIjoiQzpcXFVzZXJzXFx5ZXRpXFxEb2N1bWVudHNcXGdpdGh1YlxcZG9jc1xcc3JjXFxjb21wb25lbnRzXFx0ZW1wbGF0ZXNcXE1haW5UZW1wbGF0ZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5cclxuaW1wb3J0IExheW91dCBmcm9tIFwiQHNyYy9MYXlvdXRcIjtcclxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBUYWJsZU9mQ29udGVudCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy90b2MvVGFibGVPZkNvbnRlbnRcIjtcclxuaW1wb3J0IEhlYWRlciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy9oZWFkZXIvSGVhZGVyXCI7XHJcbmltcG9ydCBDb250ZW50VGl0bGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvY29udGVudC9Db250ZW50VGl0bGVcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgUGFnZVByb3BzIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBNRFhQcm92aWRlciB9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXRvbSwgVE9HR0xFX1dJREUsIFRPR0dMRV9OQVYsIFNFVF9UQUJMRV9PRl9DT05URU5UIH0gZnJvbSBcIkBzcmMvY29udGV4dC9hdG9tc1wiO1xyXG5pbXBvcnQgTWVkaWFTaXplIGZyb20gXCJAc3JjL3N0eWxlcy9tZWRpYVwiO1xyXG5pbXBvcnQgJ2thdGV4L2Rpc3Qva2F0ZXgubWluLmNzcydcclxuaW1wb3J0ICdnYXRzYnktcmVtYXJrLWxpbmstYmVhdXRpZnkvdGhlbWVzL25vdGlvbi5jc3MnO1xyXG4vKiAtLS1jdXN0b20gTURYIGNvbXBvbmVudHMtLS0gKi9cclxuaW1wb3J0IFAgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvUGFyYWdyYXBoXCI7XHJcbmltcG9ydCB7IEgxLCBIMiwgSDMsIEg0LCBINSwgSDYgfSBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9IZWFkaW5nXCI7XHJcbmltcG9ydCBUaGVtYXRpY0JyZWFrIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L1RoZW1hdGljQnJlYWtcIjtcclxuaW1wb3J0IEJsb2NrcXVvdGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvQmxvY2txdW90ZVwiO1xyXG5pbXBvcnQgTGlzdCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9MaXN0XCI7XHJcbmltcG9ydCBVbm9yZGVyZWRMaXN0IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L1Vub3JkZXJlZExpc3RcIjtcclxuaW1wb3J0IENvZGVCbG9jayBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9Db2RlQmxvY2tcIjtcclxuaW1wb3J0IENvZGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvQ29kZVwiO1xyXG5cclxuXHJcbnR5cGUgSXRlbSA9IHtcclxuICAgIHVybDpzdHJpbmcsXHJcbiAgICB0aXRsZTpzdHJpbmcsXHJcbiAgICBpbmRleD86bnVtYmVyLFxyXG4gICAgZGVwdGg/Om51bWJlclxyXG4gICAgaXRlbXM/OkFycmF5PEl0ZW0+XHJcbn07XHJcblxyXG50eXBlIFF1ZXJ5UHJvcHMgPSB7XHJcbiAgICBtZHg6IHtcclxuICAgICAgICBpZDogc3RyaW5nLFxyXG4gICAgICAgIGZyb250bWF0dGVyOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGRhdGU6IHN0cmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFibGVPZkNvbnRlbnRzOiB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBBcnJheTxJdGVtPlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogc3RyaW5nXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IE1haW5UZW1wbGF0ZSA9ICh7IGRhdGE6IHsgbWR4IH0sIGNoaWxkcmVuIH06IFBhZ2VQcm9wczxRdWVyeVByb3BzPikgPT4ge1xyXG4gICAgY29uc3QgaXNXaWRlID0gdXNlUmVjb2lsVmFsdWUoY3JlYXRlQXRvbShUT0dHTEVfV0lERSwgZmFsc2UpKTtcclxuICAgIGNvbnN0IGlzTmF2T3BlbmVkID0gdXNlUmVjb2lsVmFsdWUoY3JlYXRlQXRvbShUT0dHTEVfTkFWLCBmYWxzZSkpO1xyXG4gICAgY29uc3QgdG9jU2V0dGVyID0gdXNlU2V0UmVjb2lsU3RhdGUoY3JlYXRlQXRvbShTRVRfVEFCTEVfT0ZfQ09OVEVOVCwgbWR4LnRhYmxlT2ZDb250ZW50cy5pdGVtcykpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgdG9jU2V0dGVyKG1keC50YWJsZU9mQ29udGVudHMuaXRlbXMpO1xyXG4gICAgfSwgW21keF0pXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8TGF5b3V0PlxyXG4gICAgICAgICAgICA8SGVhZGVySW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XHJcbiAgICAgICAgICAgIDwvSGVhZGVySW50ZXJmYWNlPlxyXG4gICAgICAgICAgICA8Qm9keUludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uSW50ZXJmYWNlIGNsYXNzTmFtZT1cIm5hdmlnYXRpb25cIiBpc05hdk9wZW5lZD17aXNOYXZPcGVuZWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxGaXhlciBjbGFzc05hbWU9XCJoaWRlX3Njcm9sbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2aWdhdGlvbi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9GaXhlcj5cclxuICAgICAgICAgICAgICAgIDwvTmF2aWdhdGlvbkludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxDb250ZW50SW50ZXJmYWNlIGlzTmF2T3BlbmVkPXtpc05hdk9wZW5lZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRXcmFwcGVyIGlzV2lkZT17aXNXaWRlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRUaXRsZSB0aXRsZT17bWR4LmZyb250bWF0dGVyLnRpdGxlfSBkYXRlPXttZHguZnJvbnRtYXR0ZXIuZGF0ZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TURYUHJvdmlkZXIgY29tcG9uZW50cz17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogUCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgxOiBIMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgyOiBIMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgzOiBIMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg0OiBINCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg1OiBINSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg2OiBINixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyOiBUaGVtYXRpY0JyZWFrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2txdW90ZTogQmxvY2txdW90ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVsOiBVbm9yZGVyZWRMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2w6IExpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmU6IENvZGVCbG9jayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IENvZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTURYUHJvdmlkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW50V3JhcHBlcj5cclxuICAgICAgICAgICAgICAgIDwvQ29udGVudEludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxUYWJsZUludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgICAgICA8VGFibGVGaXhlcj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlT2ZDb250ZW50Lz5cclxuICAgICAgICAgICAgICAgICAgICA8L1RhYmxlRml4ZXI+XHJcbiAgICAgICAgICAgICAgICA8L1RhYmxlSW50ZXJmYWNlPlxyXG4gICAgICAgICAgICA8L0JvZHlJbnRlcmZhY2U+XHJcbiAgICAgICAgPC9MYXlvdXQ+XHJcbiAgICApXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcXVlcnkgPSBncmFwaHFsYFxyXG5xdWVyeSgkaWQ6IFN0cmluZyEpIHtcclxuICAgIG1keChpZDoge2VxOiAkaWR9KSB7XHJcbiAgICAgICAgaWRcclxuICAgICAgICBib2R5XHJcbiAgICAgICAgdGFibGVPZkNvbnRlbnRzKG1heERlcHRoOiAyKVxyXG4gICAgICAgIGZyb250bWF0dGVyIHtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICB0aXRsZVxyXG4gICAgICAgICAgICAgICAgZGF0ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufWA7XHJcblxyXG5jb25zdCBIZWFkZXJJbnRlcmZhY2UgPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGhlaWdodDogdmFyKC0taGVhZGVyLWhlaWdodCk7XHJcbiAgICB6LWluZGV4OiA1O1xyXG4gICAgcGFkZGluZzogMC42cmVtIDJyZW0gMC42cmVtIDAuNnJlbTtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTtcclxuYDtcclxuXHJcbmNvbnN0IEJvZHlJbnRlcmZhY2UgPSBzdHlsZWQuZGl2YFxyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSB2YXIoLS1oZWFkZXItaGVpZ2h0KSk7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbmA7XHJcblxyXG5jb25zdCBOYXZpZ2F0aW9uSW50ZXJmYWNlID0gc3R5bGVkLmFzaWRlPHtpc05hdk9wZW5lZD86Ym9vbGVhbn0+YFxyXG4gICAgbWFyZ2luLWxlZnQ6ICR7cD0+cC5pc05hdk9wZW5lZCA/ICcwJyA6ICdjYWxjKC0xICogdmFyKC0tc2lkZWJhci13aWR0aCkpJ307XHJcbiAgICBmbGV4OiAwIDAgdmFyKC0tc2lkZWJhci13aWR0aCk7XHJcbiAgICBmb250LXNpemU6IDAuODc1cmVtO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgIHRyYW5zaXRpb246IG1hcmdpbiAwLjI1cyB2YXIoLS1lYXNlLWluLW91dC1xdWFkKTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX1BST31weCkge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgRml4ZXIgPSBzdHlsZWQubmF2YFxyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHBhZGRpbmc6IHZhcigtLWJvZHktcGFkZGluZy10b3ApIDAgM3JlbSAwO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgd2lkdGg6IHZhcigtLXNpZGViYXItd2lkdGgpO1xyXG4gICAgJjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuYFxyXG5cclxuXHJcbmNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkLm1haW48e2lzV2lkZTogYm9vbGVhbiB9PmBcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX0FJUn1weCkge1xyXG4gICAgICAgIHdpZHRoOiAke3A9PnAuaXNXaWRlPyAnOTAlJyA6ICc2NSUnfTtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IENvbnRlbnRJbnRlcmZhY2UgPSBzdHlsZWQubWFpbjx7aXNOYXZPcGVuZWQ/OiBib29sZWFufT5gXHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqIHZhcigtLXNpZGViYXItd2lkdGgpKTtcclxuICAgIHBhZGRpbmctdG9wOiB2YXIoLS1ib2R5LXBhZGRpbmctdG9wKTtcclxuICAgIGZsZXgtZ3JvdzogMTtcclxuICAgIG1pbi13aWR0aDogMjByZW07XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBvcGFjaXR5OiAke3AgPT4gKHAuaXNOYXZPcGVuZWQgPyAwLjMgOiAxKX07XHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJHtNZWRpYVNpemUuSVBBRF9QUk99cHgpIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuXHJcbmNvbnN0IFRhYmxlSW50ZXJmYWNlID0gc3R5bGVkLmFzaWRlYFxyXG4gICAgZm9udC1zaXplOiAwLjc1cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgcGFkZGluZy10b3A6IHZhcigtLWJvZHktcGFkZGluZy10b3ApO1xyXG4gICAgd2lkdGg6IDA7XHJcbiAgICB0cmFuc2l0aW9uOiB3aWR0aCAwLjI1cyB2YXIoLS1lYXNlLWluLW91dC1xdWFkKTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5IRH1weCkge1xyXG4gICAgICAgIHdpZHRoOiB2YXIoLS1zaWRlYmFyLXdpZHRoKTtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFRhYmxlRml4ZXIgPSBzdHlsZWQoRml4ZXIpYFxyXG4gICAgcGFkZGluZzogMCAxcmVtIDAgMXJlbTtcclxuYFxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1haW5UZW1wbGF0ZTsiXX0= */\"));\nconst ContentInterface = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j2\"\n} : {\n  target: \"e1ojob7j2\",\n  label: \"ContentInterface\"\n})(\"width:calc(100% - 2 * var(--sidebar-width));padding-top:var(--body-padding-top);flex-grow:1;min-width:20rem;display:flex;justify-content:center;opacity:\", p => p.isNavOpened ? 0.3 : 1, \";@media (min-width: \", MediaSize.IPAD_PRO, \"px){opacity:1;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xceWV0aVxcRG9jdW1lbnRzXFxnaXRodWJcXGRvY3NcXHNyY1xcY29tcG9uZW50c1xcdGVtcGxhdGVzXFxNYWluVGVtcGxhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVLNkQiLCJmaWxlIjoiQzpcXFVzZXJzXFx5ZXRpXFxEb2N1bWVudHNcXGdpdGh1YlxcZG9jc1xcc3JjXFxjb21wb25lbnRzXFx0ZW1wbGF0ZXNcXE1haW5UZW1wbGF0ZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5cclxuaW1wb3J0IExheW91dCBmcm9tIFwiQHNyYy9MYXlvdXRcIjtcclxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBUYWJsZU9mQ29udGVudCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy90b2MvVGFibGVPZkNvbnRlbnRcIjtcclxuaW1wb3J0IEhlYWRlciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy9oZWFkZXIvSGVhZGVyXCI7XHJcbmltcG9ydCBDb250ZW50VGl0bGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvY29udGVudC9Db250ZW50VGl0bGVcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgUGFnZVByb3BzIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBNRFhQcm92aWRlciB9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXRvbSwgVE9HR0xFX1dJREUsIFRPR0dMRV9OQVYsIFNFVF9UQUJMRV9PRl9DT05URU5UIH0gZnJvbSBcIkBzcmMvY29udGV4dC9hdG9tc1wiO1xyXG5pbXBvcnQgTWVkaWFTaXplIGZyb20gXCJAc3JjL3N0eWxlcy9tZWRpYVwiO1xyXG5pbXBvcnQgJ2thdGV4L2Rpc3Qva2F0ZXgubWluLmNzcydcclxuaW1wb3J0ICdnYXRzYnktcmVtYXJrLWxpbmstYmVhdXRpZnkvdGhlbWVzL25vdGlvbi5jc3MnO1xyXG4vKiAtLS1jdXN0b20gTURYIGNvbXBvbmVudHMtLS0gKi9cclxuaW1wb3J0IFAgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvUGFyYWdyYXBoXCI7XHJcbmltcG9ydCB7IEgxLCBIMiwgSDMsIEg0LCBINSwgSDYgfSBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9IZWFkaW5nXCI7XHJcbmltcG9ydCBUaGVtYXRpY0JyZWFrIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L1RoZW1hdGljQnJlYWtcIjtcclxuaW1wb3J0IEJsb2NrcXVvdGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvQmxvY2txdW90ZVwiO1xyXG5pbXBvcnQgTGlzdCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9MaXN0XCI7XHJcbmltcG9ydCBVbm9yZGVyZWRMaXN0IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L1Vub3JkZXJlZExpc3RcIjtcclxuaW1wb3J0IENvZGVCbG9jayBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9Db2RlQmxvY2tcIjtcclxuaW1wb3J0IENvZGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvQ29kZVwiO1xyXG5cclxuXHJcbnR5cGUgSXRlbSA9IHtcclxuICAgIHVybDpzdHJpbmcsXHJcbiAgICB0aXRsZTpzdHJpbmcsXHJcbiAgICBpbmRleD86bnVtYmVyLFxyXG4gICAgZGVwdGg/Om51bWJlclxyXG4gICAgaXRlbXM/OkFycmF5PEl0ZW0+XHJcbn07XHJcblxyXG50eXBlIFF1ZXJ5UHJvcHMgPSB7XHJcbiAgICBtZHg6IHtcclxuICAgICAgICBpZDogc3RyaW5nLFxyXG4gICAgICAgIGZyb250bWF0dGVyOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGRhdGU6IHN0cmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFibGVPZkNvbnRlbnRzOiB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBBcnJheTxJdGVtPlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogc3RyaW5nXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IE1haW5UZW1wbGF0ZSA9ICh7IGRhdGE6IHsgbWR4IH0sIGNoaWxkcmVuIH06IFBhZ2VQcm9wczxRdWVyeVByb3BzPikgPT4ge1xyXG4gICAgY29uc3QgaXNXaWRlID0gdXNlUmVjb2lsVmFsdWUoY3JlYXRlQXRvbShUT0dHTEVfV0lERSwgZmFsc2UpKTtcclxuICAgIGNvbnN0IGlzTmF2T3BlbmVkID0gdXNlUmVjb2lsVmFsdWUoY3JlYXRlQXRvbShUT0dHTEVfTkFWLCBmYWxzZSkpO1xyXG4gICAgY29uc3QgdG9jU2V0dGVyID0gdXNlU2V0UmVjb2lsU3RhdGUoY3JlYXRlQXRvbShTRVRfVEFCTEVfT0ZfQ09OVEVOVCwgbWR4LnRhYmxlT2ZDb250ZW50cy5pdGVtcykpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgdG9jU2V0dGVyKG1keC50YWJsZU9mQ29udGVudHMuaXRlbXMpO1xyXG4gICAgfSwgW21keF0pXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8TGF5b3V0PlxyXG4gICAgICAgICAgICA8SGVhZGVySW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XHJcbiAgICAgICAgICAgIDwvSGVhZGVySW50ZXJmYWNlPlxyXG4gICAgICAgICAgICA8Qm9keUludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uSW50ZXJmYWNlIGNsYXNzTmFtZT1cIm5hdmlnYXRpb25cIiBpc05hdk9wZW5lZD17aXNOYXZPcGVuZWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxGaXhlciBjbGFzc05hbWU9XCJoaWRlX3Njcm9sbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2aWdhdGlvbi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9GaXhlcj5cclxuICAgICAgICAgICAgICAgIDwvTmF2aWdhdGlvbkludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxDb250ZW50SW50ZXJmYWNlIGlzTmF2T3BlbmVkPXtpc05hdk9wZW5lZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRXcmFwcGVyIGlzV2lkZT17aXNXaWRlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRUaXRsZSB0aXRsZT17bWR4LmZyb250bWF0dGVyLnRpdGxlfSBkYXRlPXttZHguZnJvbnRtYXR0ZXIuZGF0ZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TURYUHJvdmlkZXIgY29tcG9uZW50cz17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogUCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgxOiBIMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgyOiBIMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgzOiBIMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg0OiBINCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg1OiBINSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg2OiBINixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyOiBUaGVtYXRpY0JyZWFrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2txdW90ZTogQmxvY2txdW90ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVsOiBVbm9yZGVyZWRMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2w6IExpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmU6IENvZGVCbG9jayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IENvZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTURYUHJvdmlkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW50V3JhcHBlcj5cclxuICAgICAgICAgICAgICAgIDwvQ29udGVudEludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxUYWJsZUludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgICAgICA8VGFibGVGaXhlcj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlT2ZDb250ZW50Lz5cclxuICAgICAgICAgICAgICAgICAgICA8L1RhYmxlRml4ZXI+XHJcbiAgICAgICAgICAgICAgICA8L1RhYmxlSW50ZXJmYWNlPlxyXG4gICAgICAgICAgICA8L0JvZHlJbnRlcmZhY2U+XHJcbiAgICAgICAgPC9MYXlvdXQ+XHJcbiAgICApXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcXVlcnkgPSBncmFwaHFsYFxyXG5xdWVyeSgkaWQ6IFN0cmluZyEpIHtcclxuICAgIG1keChpZDoge2VxOiAkaWR9KSB7XHJcbiAgICAgICAgaWRcclxuICAgICAgICBib2R5XHJcbiAgICAgICAgdGFibGVPZkNvbnRlbnRzKG1heERlcHRoOiAyKVxyXG4gICAgICAgIGZyb250bWF0dGVyIHtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICB0aXRsZVxyXG4gICAgICAgICAgICAgICAgZGF0ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufWA7XHJcblxyXG5jb25zdCBIZWFkZXJJbnRlcmZhY2UgPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGhlaWdodDogdmFyKC0taGVhZGVyLWhlaWdodCk7XHJcbiAgICB6LWluZGV4OiA1O1xyXG4gICAgcGFkZGluZzogMC42cmVtIDJyZW0gMC42cmVtIDAuNnJlbTtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTtcclxuYDtcclxuXHJcbmNvbnN0IEJvZHlJbnRlcmZhY2UgPSBzdHlsZWQuZGl2YFxyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSB2YXIoLS1oZWFkZXItaGVpZ2h0KSk7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbmA7XHJcblxyXG5jb25zdCBOYXZpZ2F0aW9uSW50ZXJmYWNlID0gc3R5bGVkLmFzaWRlPHtpc05hdk9wZW5lZD86Ym9vbGVhbn0+YFxyXG4gICAgbWFyZ2luLWxlZnQ6ICR7cD0+cC5pc05hdk9wZW5lZCA/ICcwJyA6ICdjYWxjKC0xICogdmFyKC0tc2lkZWJhci13aWR0aCkpJ307XHJcbiAgICBmbGV4OiAwIDAgdmFyKC0tc2lkZWJhci13aWR0aCk7XHJcbiAgICBmb250LXNpemU6IDAuODc1cmVtO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgIHRyYW5zaXRpb246IG1hcmdpbiAwLjI1cyB2YXIoLS1lYXNlLWluLW91dC1xdWFkKTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX1BST31weCkge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgRml4ZXIgPSBzdHlsZWQubmF2YFxyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHBhZGRpbmc6IHZhcigtLWJvZHktcGFkZGluZy10b3ApIDAgM3JlbSAwO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgd2lkdGg6IHZhcigtLXNpZGViYXItd2lkdGgpO1xyXG4gICAgJjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuYFxyXG5cclxuXHJcbmNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkLm1haW48e2lzV2lkZTogYm9vbGVhbiB9PmBcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX0FJUn1weCkge1xyXG4gICAgICAgIHdpZHRoOiAke3A9PnAuaXNXaWRlPyAnOTAlJyA6ICc2NSUnfTtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IENvbnRlbnRJbnRlcmZhY2UgPSBzdHlsZWQubWFpbjx7aXNOYXZPcGVuZWQ/OiBib29sZWFufT5gXHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqIHZhcigtLXNpZGViYXItd2lkdGgpKTtcclxuICAgIHBhZGRpbmctdG9wOiB2YXIoLS1ib2R5LXBhZGRpbmctdG9wKTtcclxuICAgIGZsZXgtZ3JvdzogMTtcclxuICAgIG1pbi13aWR0aDogMjByZW07XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBvcGFjaXR5OiAke3AgPT4gKHAuaXNOYXZPcGVuZWQgPyAwLjMgOiAxKX07XHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJHtNZWRpYVNpemUuSVBBRF9QUk99cHgpIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuXHJcbmNvbnN0IFRhYmxlSW50ZXJmYWNlID0gc3R5bGVkLmFzaWRlYFxyXG4gICAgZm9udC1zaXplOiAwLjc1cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgcGFkZGluZy10b3A6IHZhcigtLWJvZHktcGFkZGluZy10b3ApO1xyXG4gICAgd2lkdGg6IDA7XHJcbiAgICB0cmFuc2l0aW9uOiB3aWR0aCAwLjI1cyB2YXIoLS1lYXNlLWluLW91dC1xdWFkKTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5IRH1weCkge1xyXG4gICAgICAgIHdpZHRoOiB2YXIoLS1zaWRlYmFyLXdpZHRoKTtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFRhYmxlRml4ZXIgPSBzdHlsZWQoRml4ZXIpYFxyXG4gICAgcGFkZGluZzogMCAxcmVtIDAgMXJlbTtcclxuYFxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1haW5UZW1wbGF0ZTsiXX0= */\"));\nconst TableInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j1\"\n} : {\n  target: \"e1ojob7j1\",\n  label: \"TableInterface\"\n})(\"font-size:0.75rem;font-weight:bold;overflow-x:hidden;overflow-y:auto;padding-top:var(--body-padding-top);width:0;transition:width 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.HD, \"px){width:var(--sidebar-width);}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst TableFixer = _styled(Fixer, process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j0\"\n} : {\n  target: \"e1ojob7j0\",\n  label: \"TableFixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\"\n} : {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nMainTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(MainTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","pre","code","_provideComponents","components","React","id","className","wrapper","MDXLayout","MainTemplate","_ref","data","mdx","children","isWide","useRecoilValue","createAtom","TOGGLE_WIDE","isNavOpened","TOGGLE_NAV","tocSetter","useSetRecoilState","SET_TABLE_OF_CONTENT","tableOfContents","items","useEffect","___EmotionJSX","Layout","HeaderInterface","Header","BodyInterface","NavigationInterface","Fixer","Navigation","ContentInterface","ContentWrapper","ContentTitle","title","frontmatter","date","MDXProvider","P","H1","h2","H2","h3","H3","h4","H4","h5","H5","h6","H6","hr","ThematicBreak","blockquote","Blockquote","ul","UnorderedList","ol","List","CodeBlock","Code","TableInterface","TableFixer","TableOfContent","_styled","target","name","styles","MediaSize","IPAD_PRO","IPAD_AIR","HD","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}