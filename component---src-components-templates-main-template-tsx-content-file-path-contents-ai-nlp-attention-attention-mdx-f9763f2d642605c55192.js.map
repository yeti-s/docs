{"version":3,"file":"component---src-components-templates-main-template-tsx-content-file-path-contents-ai-nlp-attention-attention-mdx-f9763f2d642605c55192.js","mappings":"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","sources":["webpack://yeti-docs/./src/components/templates/MainTemplate.tsx"],"sourcesContent":["import GATSBY_COMPILED_MDX from \"C:/Users/yeti/Documents/github/docs/contents/ai/nlp/attention/attention.mdx\";\nimport _styled from \"@emotion/styled/base\";\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nimport React, {useEffect} from \"react\";\nimport Layout from \"@src/Layout\";\nimport Navigation from \"@src/components/organisms/navigation/Navigation\";\nimport TableOfContent from \"@src/components/organisms/toc/TableOfContent\";\nimport Header from \"@src/components/organisms/header/Header\";\nimport ContentTitle from \"@src/components/organisms/content/ContentTitle\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport {createAtom, TOGGLE_WIDE, TOGGLE_NAV, SET_TABLE_OF_CONTENT} from \"@src/context/atoms\";\nimport MediaSize from \"@src/styles/media\";\nimport 'katex/dist/katex.min.css';\nimport 'gatsby-remark-link-beautify/themes/notion.css';\nimport P from \"@src/components/mdx/Paragraph\";\nimport {H1, H2, H3, H4, H5, H6} from \"@src/components/mdx/Heading\";\nimport ThematicBreak from \"@src/components/mdx/ThematicBreak\";\nimport Blockquote from \"@src/components/mdx/Blockquote\";\nimport List from \"@src/components/mdx/List\";\nimport UnorderedList from \"@src/components/mdx/UnorderedList\";\nimport CodeBlock from \"@src/components/mdx/CodeBlock\";\nimport Code from \"@src/components/mdx/Code\";\nimport {jsx as ___EmotionJSX} from \"@emotion/react\";\nconst MainTemplate = _ref => {\n  let {data: {mdx}, children} = _ref;\n  const isWide = useRecoilValue(createAtom(TOGGLE_WIDE, false));\n  const isNavOpened = useRecoilValue(createAtom(TOGGLE_NAV, false));\n  const tocSetter = useSetRecoilState(createAtom(SET_TABLE_OF_CONTENT, mdx.tableOfContents.items));\n  useEffect(() => {\n    tocSetter(mdx.tableOfContents.items);\n  }, [mdx]);\n  return ___EmotionJSX(Layout, null, ___EmotionJSX(HeaderInterface, null, ___EmotionJSX(Header, null)), ___EmotionJSX(BodyInterface, null, ___EmotionJSX(NavigationInterface, {\n    className: \"navigation\",\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(Fixer, {\n    className: \"hide_scroll\"\n  }, ___EmotionJSX(Navigation, null))), ___EmotionJSX(ContentInterface, {\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(ContentWrapper, {\n    isWide: isWide\n  }, ___EmotionJSX(ContentTitle, {\n    title: mdx.frontmatter.title,\n    date: mdx.frontmatter.date\n  }), ___EmotionJSX(MDXProvider, {\n    components: {\n      p: P,\n      h1: H1,\n      h2: H2,\n      h3: H3,\n      h4: H4,\n      h5: H5,\n      h6: H6,\n      hr: ThematicBreak,\n      blockquote: Blockquote,\n      ul: UnorderedList,\n      ol: List,\n      pre: CodeBlock,\n      code: Code\n    }\n  }, children))), ___EmotionJSX(TableInterface, null, ___EmotionJSX(TableFixer, null, ___EmotionJSX(TableOfContent, null)))));\n};\nconst query = \"1875222860\";\nconst HeaderInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j7\"\n} : {\n  target: \"e1ojob7j7\",\n  label: \"HeaderInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\"\n} : {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst BodyInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j6\"\n} : {\n  target: \"e1ojob7j6\",\n  label: \"BodyInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\"\n} : {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst NavigationInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j5\"\n} : {\n  target: \"e1ojob7j5\",\n  label: \"NavigationInterface\"\n})(\"margin-left:\", p => p.isNavOpened ? '0' : 'calc(-1 * var(--sidebar-width))', \";flex:0 0 var(--sidebar-width);font-size:0.875rem;overflow-x:hidden;overflow-y:auto;transition:margin 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.IPAD_PRO, \"px){margin-left:0;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst Fixer = _styled(\"nav\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j4\"\n} : {\n  target: \"e1ojob7j4\",\n  label: \"Fixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\"\n} : {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst ContentWrapper = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j3\"\n} : {\n  target: \"e1ojob7j3\",\n  label: \"ContentWrapper\"\n})(\"padding:1rem;width:100%;@media (min-width: \", MediaSize.IPAD_AIR, \"px){width:\", p => p.isWide ? '90%' : '65%', \";}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst ContentInterface = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j2\"\n} : {\n  target: \"e1ojob7j2\",\n  label: \"ContentInterface\"\n})(\"width:calc(100% - 2 * var(--sidebar-width));padding-top:var(--body-padding-top);flex-grow:1;min-width:20rem;display:flex;justify-content:center;opacity:\", p => p.isNavOpened ? 0.3 : 1, \";@media (min-width: \", MediaSize.IPAD_PRO, \"px){opacity:1;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xceWV0aVxcRG9jdW1lbnRzXFxnaXRodWJcXGRvY3NcXHNyY1xcY29tcG9uZW50c1xcdGVtcGxhdGVzXFxNYWluVGVtcGxhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVLNkQiLCJmaWxlIjoiQzpcXFVzZXJzXFx5ZXRpXFxEb2N1bWVudHNcXGdpdGh1YlxcZG9jc1xcc3JjXFxjb21wb25lbnRzXFx0ZW1wbGF0ZXNcXE1haW5UZW1wbGF0ZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5cclxuaW1wb3J0IExheW91dCBmcm9tIFwiQHNyYy9MYXlvdXRcIjtcclxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBUYWJsZU9mQ29udGVudCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy90b2MvVGFibGVPZkNvbnRlbnRcIjtcclxuaW1wb3J0IEhlYWRlciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy9oZWFkZXIvSGVhZGVyXCI7XHJcbmltcG9ydCBDb250ZW50VGl0bGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvY29udGVudC9Db250ZW50VGl0bGVcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgUGFnZVByb3BzIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBNRFhQcm92aWRlciB9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXRvbSwgVE9HR0xFX1dJREUsIFRPR0dMRV9OQVYsIFNFVF9UQUJMRV9PRl9DT05URU5UIH0gZnJvbSBcIkBzcmMvY29udGV4dC9hdG9tc1wiO1xyXG5pbXBvcnQgTWVkaWFTaXplIGZyb20gXCJAc3JjL3N0eWxlcy9tZWRpYVwiO1xyXG5pbXBvcnQgJ2thdGV4L2Rpc3Qva2F0ZXgubWluLmNzcydcclxuaW1wb3J0ICdnYXRzYnktcmVtYXJrLWxpbmstYmVhdXRpZnkvdGhlbWVzL25vdGlvbi5jc3MnO1xyXG4vKiAtLS1jdXN0b20gTURYIGNvbXBvbmVudHMtLS0gKi9cclxuaW1wb3J0IFAgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvUGFyYWdyYXBoXCI7XHJcbmltcG9ydCB7IEgxLCBIMiwgSDMsIEg0LCBINSwgSDYgfSBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9IZWFkaW5nXCI7XHJcbmltcG9ydCBUaGVtYXRpY0JyZWFrIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L1RoZW1hdGljQnJlYWtcIjtcclxuaW1wb3J0IEJsb2NrcXVvdGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvQmxvY2txdW90ZVwiO1xyXG5pbXBvcnQgTGlzdCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9MaXN0XCI7XHJcbmltcG9ydCBVbm9yZGVyZWRMaXN0IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L1Vub3JkZXJlZExpc3RcIjtcclxuaW1wb3J0IENvZGVCbG9jayBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9Db2RlQmxvY2tcIjtcclxuaW1wb3J0IENvZGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvQ29kZVwiO1xyXG5cclxuXHJcbnR5cGUgSXRlbSA9IHtcclxuICAgIHVybDpzdHJpbmcsXHJcbiAgICB0aXRsZTpzdHJpbmcsXHJcbiAgICBpbmRleD86bnVtYmVyLFxyXG4gICAgZGVwdGg/Om51bWJlclxyXG4gICAgaXRlbXM/OkFycmF5PEl0ZW0+XHJcbn07XHJcblxyXG50eXBlIFF1ZXJ5UHJvcHMgPSB7XHJcbiAgICBtZHg6IHtcclxuICAgICAgICBpZDogc3RyaW5nLFxyXG4gICAgICAgIGZyb250bWF0dGVyOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGRhdGU6IHN0cmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFibGVPZkNvbnRlbnRzOiB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBBcnJheTxJdGVtPlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogc3RyaW5nXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IE1haW5UZW1wbGF0ZSA9ICh7IGRhdGE6IHsgbWR4IH0sIGNoaWxkcmVuIH06IFBhZ2VQcm9wczxRdWVyeVByb3BzPikgPT4ge1xyXG4gICAgY29uc3QgaXNXaWRlID0gdXNlUmVjb2lsVmFsdWUoY3JlYXRlQXRvbShUT0dHTEVfV0lERSwgZmFsc2UpKTtcclxuICAgIGNvbnN0IGlzTmF2T3BlbmVkID0gdXNlUmVjb2lsVmFsdWUoY3JlYXRlQXRvbShUT0dHTEVfTkFWLCBmYWxzZSkpO1xyXG4gICAgY29uc3QgdG9jU2V0dGVyID0gdXNlU2V0UmVjb2lsU3RhdGUoY3JlYXRlQXRvbShTRVRfVEFCTEVfT0ZfQ09OVEVOVCwgbWR4LnRhYmxlT2ZDb250ZW50cy5pdGVtcykpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgdG9jU2V0dGVyKG1keC50YWJsZU9mQ29udGVudHMuaXRlbXMpO1xyXG4gICAgfSwgW21keF0pXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8TGF5b3V0PlxyXG4gICAgICAgICAgICA8SGVhZGVySW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XHJcbiAgICAgICAgICAgIDwvSGVhZGVySW50ZXJmYWNlPlxyXG4gICAgICAgICAgICA8Qm9keUludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uSW50ZXJmYWNlIGNsYXNzTmFtZT1cIm5hdmlnYXRpb25cIiBpc05hdk9wZW5lZD17aXNOYXZPcGVuZWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxGaXhlciBjbGFzc05hbWU9XCJoaWRlX3Njcm9sbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2aWdhdGlvbi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9GaXhlcj5cclxuICAgICAgICAgICAgICAgIDwvTmF2aWdhdGlvbkludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxDb250ZW50SW50ZXJmYWNlIGlzTmF2T3BlbmVkPXtpc05hdk9wZW5lZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRXcmFwcGVyIGlzV2lkZT17aXNXaWRlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRUaXRsZSB0aXRsZT17bWR4LmZyb250bWF0dGVyLnRpdGxlfSBkYXRlPXttZHguZnJvbnRtYXR0ZXIuZGF0ZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TURYUHJvdmlkZXIgY29tcG9uZW50cz17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogUCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgxOiBIMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgyOiBIMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgzOiBIMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg0OiBINCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg1OiBINSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg2OiBINixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyOiBUaGVtYXRpY0JyZWFrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2txdW90ZTogQmxvY2txdW90ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVsOiBVbm9yZGVyZWRMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2w6IExpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmU6IENvZGVCbG9jayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IENvZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTURYUHJvdmlkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW50V3JhcHBlcj5cclxuICAgICAgICAgICAgICAgIDwvQ29udGVudEludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgIDxUYWJsZUludGVyZmFjZT5cclxuICAgICAgICAgICAgICAgICAgICA8VGFibGVGaXhlcj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlT2ZDb250ZW50Lz5cclxuICAgICAgICAgICAgICAgICAgICA8L1RhYmxlRml4ZXI+XHJcbiAgICAgICAgICAgICAgICA8L1RhYmxlSW50ZXJmYWNlPlxyXG4gICAgICAgICAgICA8L0JvZHlJbnRlcmZhY2U+XHJcbiAgICAgICAgPC9MYXlvdXQ+XHJcbiAgICApXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcXVlcnkgPSBncmFwaHFsYFxyXG5xdWVyeSgkaWQ6IFN0cmluZyEpIHtcclxuICAgIG1keChpZDoge2VxOiAkaWR9KSB7XHJcbiAgICAgICAgaWRcclxuICAgICAgICBib2R5XHJcbiAgICAgICAgdGFibGVPZkNvbnRlbnRzKG1heERlcHRoOiAyKVxyXG4gICAgICAgIGZyb250bWF0dGVyIHtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICB0aXRsZVxyXG4gICAgICAgICAgICAgICAgZGF0ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufWA7XHJcblxyXG5jb25zdCBIZWFkZXJJbnRlcmZhY2UgPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGhlaWdodDogdmFyKC0taGVhZGVyLWhlaWdodCk7XHJcbiAgICB6LWluZGV4OiA1O1xyXG4gICAgcGFkZGluZzogMC42cmVtIDJyZW0gMC42cmVtIDAuNnJlbTtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTtcclxuYDtcclxuXHJcbmNvbnN0IEJvZHlJbnRlcmZhY2UgPSBzdHlsZWQuZGl2YFxyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSB2YXIoLS1oZWFkZXItaGVpZ2h0KSk7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbmA7XHJcblxyXG5jb25zdCBOYXZpZ2F0aW9uSW50ZXJmYWNlID0gc3R5bGVkLmFzaWRlPHtpc05hdk9wZW5lZD86Ym9vbGVhbn0+YFxyXG4gICAgbWFyZ2luLWxlZnQ6ICR7cD0+cC5pc05hdk9wZW5lZCA/ICcwJyA6ICdjYWxjKC0xICogdmFyKC0tc2lkZWJhci13aWR0aCkpJ307XHJcbiAgICBmbGV4OiAwIDAgdmFyKC0tc2lkZWJhci13aWR0aCk7XHJcbiAgICBmb250LXNpemU6IDAuODc1cmVtO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgIHRyYW5zaXRpb246IG1hcmdpbiAwLjI1cyB2YXIoLS1lYXNlLWluLW91dC1xdWFkKTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX1BST31weCkge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgRml4ZXIgPSBzdHlsZWQubmF2YFxyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHBhZGRpbmc6IHZhcigtLWJvZHktcGFkZGluZy10b3ApIDAgM3JlbSAwO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgd2lkdGg6IHZhcigtLXNpZGViYXItd2lkdGgpO1xyXG4gICAgJjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuYFxyXG5cclxuXHJcbmNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkLm1haW48e2lzV2lkZTogYm9vbGVhbiB9PmBcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX0FJUn1weCkge1xyXG4gICAgICAgIHdpZHRoOiAke3A9PnAuaXNXaWRlPyAnOTAlJyA6ICc2NSUnfTtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IENvbnRlbnRJbnRlcmZhY2UgPSBzdHlsZWQubWFpbjx7aXNOYXZPcGVuZWQ/OiBib29sZWFufT5gXHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqIHZhcigtLXNpZGViYXItd2lkdGgpKTtcclxuICAgIHBhZGRpbmctdG9wOiB2YXIoLS1ib2R5LXBhZGRpbmctdG9wKTtcclxuICAgIGZsZXgtZ3JvdzogMTtcclxuICAgIG1pbi13aWR0aDogMjByZW07XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBvcGFjaXR5OiAke3AgPT4gKHAuaXNOYXZPcGVuZWQgPyAwLjMgOiAxKX07XHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJHtNZWRpYVNpemUuSVBBRF9QUk99cHgpIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuXHJcbmNvbnN0IFRhYmxlSW50ZXJmYWNlID0gc3R5bGVkLmFzaWRlYFxyXG4gICAgZm9udC1zaXplOiAwLjc1cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgcGFkZGluZy10b3A6IHZhcigtLWJvZHktcGFkZGluZy10b3ApO1xyXG4gICAgd2lkdGg6IDA7XHJcbiAgICB0cmFuc2l0aW9uOiB3aWR0aCAwLjI1cyB2YXIoLS1lYXNlLWluLW91dC1xdWFkKTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5IRH1weCkge1xyXG4gICAgICAgIHdpZHRoOiB2YXIoLS1zaWRlYmFyLXdpZHRoKTtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFRhYmxlRml4ZXIgPSBzdHlsZWQoRml4ZXIpYFxyXG4gICAgcGFkZGluZzogMCAxcmVtIDAgMXJlbTtcclxuYFxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1haW5UZW1wbGF0ZTsiXX0= */\"));\nconst TableInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j1\"\n} : {\n  target: \"e1ojob7j1\",\n  label: \"TableInterface\"\n})(\"font-size:0.75rem;font-weight:bold;overflow-x:hidden;overflow-y:auto;padding-top:var(--body-padding-top);width:0;transition:width 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.HD, \"px){width:var(--sidebar-width);}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst TableFixer = _styled(Fixer, process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j0\"\n} : {\n  target: \"e1ojob7j0\",\n  label: \"TableFixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\"\n} : {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nMainTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(MainTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["MainTemplate","_ref","data","mdx","children","isWide","useRecoilValue","createAtom","TOGGLE_WIDE","isNavOpened","TOGGLE_NAV","tocSetter","useSetRecoilState","SET_TABLE_OF_CONTENT","tableOfContents","items","useEffect","___EmotionJSX","Layout","HeaderInterface","Header","BodyInterface","NavigationInterface","className","Fixer","Navigation","ContentInterface","ContentWrapper","ContentTitle","title","frontmatter","date","MDXProvider","components","p","P","h1","H1","h2","H2","h3","H3","h4","H4","h5","H5","h6","H6","hr","ThematicBreak","blockquote","Blockquote","ul","UnorderedList","ol","List","pre","CodeBlock","code","Code","TableInterface","TableFixer","TableOfContent","_styled","target","name","styles","MediaSize","IPAD_PRO","IPAD_AIR","HD","GatsbyMDXWrapper","props","React","GATSBY_COMPILED_MDX"],"sourceRoot":""}