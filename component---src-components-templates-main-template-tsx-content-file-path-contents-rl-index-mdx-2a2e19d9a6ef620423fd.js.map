{"version":3,"file":"component---src-components-templates-main-template-tsx-content-file-path-contents-rl-index-mdx-2a2e19d9a6ef620423fd.js","mappings":"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","sources":["webpack://yeti-docs/./contents/rl/index.mdx","webpack://yeti-docs/./src/components/templates/MainTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"강화학습에 대한 내용을 다룹니다.\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/yeti/Documents/github/docs/contents/rl/index.mdx\";\nimport _styled from \"@emotion/styled/base\";\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nimport React, {useEffect} from \"react\";\nimport Layout from \"@src/Layout\";\nimport Navigation from \"@src/components/organisms/navigation/Navigation\";\nimport TableOfContent from \"@src/components/organisms/toc/TableOfContent\";\nimport Header from \"@src/components/organisms/header/Header\";\nimport ContentTitle from \"@src/components/organisms/content/ContentTitle\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport {createAtom, TOGGLE_WIDE, TOGGLE_NAV, SET_TABLE_OF_CONTENT} from \"@src/context/atoms\";\nimport MediaSize from \"@src/styles/media\";\nimport 'katex/dist/katex.min.css';\nimport P from \"@src/components/mdx/Paragraph\";\nimport {H1, H2, H3, H4, H5, H6} from \"@src/components/mdx/Heading\";\nimport ThematicBreak from \"@src/components/mdx/ThematicBreak\";\nimport Blockquote from \"@src/components/mdx/Blockquote\";\nimport List from \"@src/components/mdx/List\";\nimport UnorderedList from \"@src/components/mdx/UnorderedList\";\nimport CodeBlock from \"@src/components/mdx/CodeBlock\";\nimport Code from \"@src/components/mdx/Code\";\nimport {jsx as ___EmotionJSX} from \"@emotion/react\";\nconst MainTemplate = _ref => {\n  let {data: {mdx}, children} = _ref;\n  const isWide = useRecoilValue(createAtom(TOGGLE_WIDE, false));\n  const isNavOpened = useRecoilValue(createAtom(TOGGLE_NAV, false));\n  const tocSetter = useSetRecoilState(createAtom(SET_TABLE_OF_CONTENT, mdx.tableOfContents.items));\n  useEffect(() => {\n    tocSetter(mdx.tableOfContents.items);\n  }, [mdx]);\n  return ___EmotionJSX(Layout, null, ___EmotionJSX(HeaderInterface, null, ___EmotionJSX(Header, null)), ___EmotionJSX(BodyInterface, null, ___EmotionJSX(NavigationInterface, {\n    className: \"navigation\",\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(Fixer, {\n    className: \"hide_scroll\"\n  }, ___EmotionJSX(Navigation, null))), ___EmotionJSX(ContentInterface, {\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(ContentWrapper, {\n    isWide: isWide\n  }, ___EmotionJSX(ContentTitle, {\n    title: mdx.frontmatter.title,\n    date: mdx.frontmatter.date\n  }), ___EmotionJSX(MDXProvider, {\n    components: {\n      p: P,\n      h1: H1,\n      h2: H2,\n      h3: H3,\n      h4: H4,\n      h5: H5,\n      h6: H6,\n      hr: ThematicBreak,\n      blockquote: Blockquote,\n      ul: UnorderedList,\n      ol: List,\n      pre: CodeBlock,\n      code: Code\n    }\n  }, children))), ___EmotionJSX(TableInterface, null, ___EmotionJSX(TableFixer, null, ___EmotionJSX(TableOfContent, null)))));\n};\nconst query = \"1875222860\";\nconst HeaderInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j7\"\n} : {\n  target: \"e1ojob7j7\",\n  label: \"HeaderInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\"\n} : {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst BodyInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j6\"\n} : {\n  target: \"e1ojob7j6\",\n  label: \"BodyInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\"\n} : {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst NavigationInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j5\"\n} : {\n  target: \"e1ojob7j5\",\n  label: \"NavigationInterface\"\n})(\"margin-left:\", p => p.isNavOpened ? '0' : 'calc(-1 * var(--sidebar-width))', \";flex:0 0 var(--sidebar-width);font-size:0.875rem;overflow-x:hidden;overflow-y:auto;transition:margin 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.IPAD_PRO, \"px){margin-left:0;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst Fixer = _styled(\"nav\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j4\"\n} : {\n  target: \"e1ojob7j4\",\n  label: \"Fixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\"\n} : {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst ContentWrapper = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j3\"\n} : {\n  target: \"e1ojob7j3\",\n  label: \"ContentWrapper\"\n})(\"padding:1rem;width:100%;@media (min-width: \", MediaSize.IPAD_AIR, \"px){width:\", p => p.isWide ? '90%' : '65%', \";}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst ContentInterface = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j2\"\n} : {\n  target: \"e1ojob7j2\",\n  label: \"ContentInterface\"\n})(\"width:calc(100% - 2 * var(--sidebar-width));padding-top:var(--body-padding-top);flex-grow:1;min-width:20rem;display:flex;justify-content:center;opacity:\", p => p.isNavOpened ? 0.3 : 1, \";@media (min-width: \", MediaSize.IPAD_PRO, \"px){opacity:1;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst TableInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j1\"\n} : {\n  target: \"e1ojob7j1\",\n  label: \"TableInterface\"\n})(\"font-size:0.75rem;font-weight:bold;overflow-x:hidden;overflow-y:auto;padding-top:var(--body-padding-top);width:0;transition:width 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.HD, \"px){width:var(--sidebar-width);}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst TableFixer = _styled(Fixer, process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j0\"\n} : {\n  target: \"e1ojob7j0\",\n  label: \"TableFixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\"\n} : {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xceWV0aVxcRG9jdW1lbnRzXFxnaXRodWJcXGRvY3NcXHNyY1xcY29tcG9uZW50c1xcdGVtcGxhdGVzXFxNYWluVGVtcGxhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtNZ0MiLCJmaWxlIjoiQzpcXFVzZXJzXFx5ZXRpXFxEb2N1bWVudHNcXGdpdGh1YlxcZG9jc1xcc3JjXFxjb21wb25lbnRzXFx0ZW1wbGF0ZXNcXE1haW5UZW1wbGF0ZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5cclxuaW1wb3J0IExheW91dCBmcm9tIFwiQHNyYy9MYXlvdXRcIjtcclxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBUYWJsZU9mQ29udGVudCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy90b2MvVGFibGVPZkNvbnRlbnRcIjtcclxuaW1wb3J0IEhlYWRlciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy9oZWFkZXIvSGVhZGVyXCI7XHJcbmltcG9ydCBDb250ZW50VGl0bGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvY29udGVudC9Db250ZW50VGl0bGVcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgUGFnZVByb3BzIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBNRFhQcm92aWRlciB9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXRvbSwgVE9HR0xFX1dJREUsIFRPR0dMRV9OQVYsIFNFVF9UQUJMRV9PRl9DT05URU5UIH0gZnJvbSBcIkBzcmMvY29udGV4dC9hdG9tc1wiO1xyXG5pbXBvcnQgTWVkaWFTaXplIGZyb20gXCJAc3JjL3N0eWxlcy9tZWRpYVwiO1xyXG5pbXBvcnQgJ2thdGV4L2Rpc3Qva2F0ZXgubWluLmNzcydcclxuXHJcbi8qIC0tLWN1c3RvbSBNRFggY29tcG9uZW50cy0tLSAqL1xyXG5pbXBvcnQgUCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9QYXJhZ3JhcGhcIjtcclxuaW1wb3J0IHsgSDEsIEgyLCBIMywgSDQsIEg1LCBINiB9IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L0hlYWRpbmdcIjtcclxuaW1wb3J0IFRoZW1hdGljQnJlYWsgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvVGhlbWF0aWNCcmVha1wiO1xyXG5pbXBvcnQgQmxvY2txdW90ZSBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9CbG9ja3F1b3RlXCI7XHJcbmltcG9ydCBMaXN0IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L0xpc3RcIjtcclxuaW1wb3J0IFVub3JkZXJlZExpc3QgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvVW5vcmRlcmVkTGlzdFwiO1xyXG5pbXBvcnQgQ29kZUJsb2NrIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L0NvZGVCbG9ja1wiO1xyXG5pbXBvcnQgQ29kZSBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9Db2RlXCI7XHJcblxyXG5cclxudHlwZSBJdGVtID0ge1xyXG4gICAgdXJsOnN0cmluZyxcclxuICAgIHRpdGxlOnN0cmluZyxcclxuICAgIGluZGV4PzpudW1iZXIsXHJcbiAgICBkZXB0aD86bnVtYmVyXHJcbiAgICBpdGVtcz86QXJyYXk8SXRlbT5cclxufTtcclxuXHJcbnR5cGUgUXVlcnlQcm9wcyA9IHtcclxuICAgIG1keDoge1xyXG4gICAgICAgIGlkOiBzdHJpbmcsXHJcbiAgICAgICAgZnJvbnRtYXR0ZXI6IHtcclxuICAgICAgICAgICAgdGl0bGU6IHN0cmluZyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgICAgICAgICAgZGF0ZTogc3RyaW5nXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YWJsZU9mQ29udGVudHM6IHtcclxuICAgICAgICAgICAgaXRlbXM6IEFycmF5PEl0ZW0+XHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBzdHJpbmdcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgTWFpblRlbXBsYXRlID0gKHsgZGF0YTogeyBtZHggfSwgY2hpbGRyZW4gfTogUGFnZVByb3BzPFF1ZXJ5UHJvcHM+KSA9PiB7XHJcbiAgICBjb25zdCBpc1dpZGUgPSB1c2VSZWNvaWxWYWx1ZShjcmVhdGVBdG9tKFRPR0dMRV9XSURFLCBmYWxzZSkpO1xyXG4gICAgY29uc3QgaXNOYXZPcGVuZWQgPSB1c2VSZWNvaWxWYWx1ZShjcmVhdGVBdG9tKFRPR0dMRV9OQVYsIGZhbHNlKSk7XHJcbiAgICBjb25zdCB0b2NTZXR0ZXIgPSB1c2VTZXRSZWNvaWxTdGF0ZShjcmVhdGVBdG9tKFNFVF9UQUJMRV9PRl9DT05URU5ULCBtZHgudGFibGVPZkNvbnRlbnRzLml0ZW1zKSk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICB0b2NTZXR0ZXIobWR4LnRhYmxlT2ZDb250ZW50cy5pdGVtcyk7XHJcbiAgICB9LCBbbWR4XSlcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxMYXlvdXQ+XHJcbiAgICAgICAgICAgIDxIZWFkZXJJbnRlcmZhY2U+XHJcbiAgICAgICAgICAgICAgICA8SGVhZGVyLz5cclxuICAgICAgICAgICAgPC9IZWFkZXJJbnRlcmZhY2U+XHJcbiAgICAgICAgICAgIDxCb2R5SW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPE5hdmlnYXRpb25JbnRlcmZhY2UgY2xhc3NOYW1lPVwibmF2aWdhdGlvblwiIGlzTmF2T3BlbmVkPXtpc05hdk9wZW5lZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEZpeGVyIGNsYXNzTmFtZT1cImhpZGVfc2Nyb2xsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0ZpeGVyPlxyXG4gICAgICAgICAgICAgICAgPC9OYXZpZ2F0aW9uSW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPENvbnRlbnRJbnRlcmZhY2UgaXNOYXZPcGVuZWQ9e2lzTmF2T3BlbmVkfT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29udGVudFdyYXBwZXIgaXNXaWRlPXtpc1dpZGV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29udGVudFRpdGxlIHRpdGxlPXttZHguZnJvbnRtYXR0ZXIudGl0bGV9IGRhdGU9e21keC5mcm9udG1hdHRlci5kYXRlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNRFhQcm92aWRlciBjb21wb25lbnRzPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwOiBQLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDE6IEgxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDI6IEgyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDM6IEgzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDQ6IEg0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDU6IEg1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDY6IEg2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHI6IFRoZW1hdGljQnJlYWssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3F1b3RlOiBCbG9ja3F1b3RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdWw6IFVub3JkZXJlZExpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbDogTGlzdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZTogQ29kZUJsb2NrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogQ29kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9NRFhQcm92aWRlcj5cclxuICAgICAgICAgICAgICAgICAgICA8L0NvbnRlbnRXcmFwcGVyPlxyXG4gICAgICAgICAgICAgICAgPC9Db250ZW50SW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPFRhYmxlSW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZUZpeGVyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVPZkNvbnRlbnQvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGFibGVGaXhlcj5cclxuICAgICAgICAgICAgICAgIDwvVGFibGVJbnRlcmZhY2U+XHJcbiAgICAgICAgICAgIDwvQm9keUludGVyZmFjZT5cclxuICAgICAgICA8L0xheW91dD5cclxuICAgIClcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBxdWVyeSA9IGdyYXBocWxgXHJcbnF1ZXJ5KCRpZDogU3RyaW5nISkge1xyXG4gICAgbWR4KGlkOiB7ZXE6ICRpZH0pIHtcclxuICAgICAgICBpZFxyXG4gICAgICAgIGJvZHlcclxuICAgICAgICB0YWJsZU9mQ29udGVudHMobWF4RGVwdGg6IDIpXHJcbiAgICAgICAgZnJvbnRtYXR0ZXIge1xyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgICAgIHRpdGxlXHJcbiAgICAgICAgICAgICAgICBkYXRlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59YDtcclxuXHJcbmNvbnN0IEhlYWRlckludGVyZmFjZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1oZWFkZXItaGVpZ2h0KTtcclxuICAgIHotaW5kZXg6IDU7XHJcbiAgICBwYWRkaW5nOiAwLjZyZW0gMnJlbSAwLjZyZW0gMC42cmVtO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpO1xyXG5gO1xyXG5cclxuY29uc3QgQm9keUludGVyZmFjZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIHZhcigtLWhlYWRlci1oZWlnaHQpKTtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuYDtcclxuXHJcbmNvbnN0IE5hdmlnYXRpb25JbnRlcmZhY2UgPSBzdHlsZWQuYXNpZGU8e2lzTmF2T3BlbmVkPzpib29sZWFufT5gXHJcbiAgICBtYXJnaW4tbGVmdDogJHtwPT5wLmlzTmF2T3BlbmVkID8gJzAnIDogJ2NhbGMoLTEgKiB2YXIoLS1zaWRlYmFyLXdpZHRoKSknfTtcclxuICAgIGZsZXg6IDAgMCB2YXIoLS1zaWRlYmFyLXdpZHRoKTtcclxuICAgIGZvbnQtc2l6ZTogMC44NzVyZW07XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgdHJhbnNpdGlvbjogbWFyZ2luIDAuMjVzIHZhcigtLWVhc2UtaW4tb3V0LXF1YWQpO1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICR7TWVkaWFTaXplLklQQURfUFJPfXB4KSB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBGaXhlciA9IHN0eWxlZC5uYXZgXHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgcGFkZGluZzogdmFyKC0tYm9keS1wYWRkaW5nLXRvcCkgMCAzcmVtIDA7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB3aWR0aDogdmFyKC0tc2lkZWJhci13aWR0aCk7XHJcbiAgICAmOi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG5gXHJcblxyXG5cclxuY29uc3QgQ29udGVudFdyYXBwZXIgPSBzdHlsZWQubWFpbjx7aXNXaWRlOiBib29sZWFuIH0+YFxyXG4gICAgcGFkZGluZzogMXJlbTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICR7TWVkaWFTaXplLklQQURfQUlSfXB4KSB7XHJcbiAgICAgICAgd2lkdGg6ICR7cD0+cC5pc1dpZGU/ICc5MCUnIDogJzY1JSd9O1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29udGVudEludGVyZmFjZSA9IHN0eWxlZC5tYWluPHtpc05hdk9wZW5lZD86IGJvb2xlYW59PmBcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyICogdmFyKC0tc2lkZWJhci13aWR0aCkpO1xyXG4gICAgcGFkZGluZy10b3A6IHZhcigtLWJvZHktcGFkZGluZy10b3ApO1xyXG4gICAgZmxleC1ncm93OiAxO1xyXG4gICAgbWluLXdpZHRoOiAyMHJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIG9wYWNpdHk6ICR7cCA9PiAocC5pc05hdk9wZW5lZCA/IDAuMyA6IDEpfTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX1BST31weCkge1xyXG4gICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5cclxuY29uc3QgVGFibGVJbnRlcmZhY2UgPSBzdHlsZWQuYXNpZGVgXHJcbiAgICBmb250LXNpemU6IDAuNzVyZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgICBwYWRkaW5nLXRvcDogdmFyKC0tYm9keS1wYWRkaW5nLXRvcCk7XHJcbiAgICB3aWR0aDogMDtcclxuICAgIHRyYW5zaXRpb246IHdpZHRoIDAuMjVzIHZhcigtLWVhc2UtaW4tb3V0LXF1YWQpO1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICR7TWVkaWFTaXplLkhEfXB4KSB7XHJcbiAgICAgICAgd2lkdGg6IHZhcigtLXNpZGViYXItd2lkdGgpO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgVGFibGVGaXhlciA9IHN0eWxlZChGaXhlcilgXHJcbiAgICBwYWRkaW5nOiAwIDFyZW0gMCAxcmVtO1xyXG5gXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFpblRlbXBsYXRlOyJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nMainTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(MainTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","MainTemplate","_ref","data","mdx","children","isWide","useRecoilValue","createAtom","TOGGLE_WIDE","isNavOpened","TOGGLE_NAV","tocSetter","useSetRecoilState","SET_TABLE_OF_CONTENT","tableOfContents","items","useEffect","___EmotionJSX","Layout","HeaderInterface","Header","BodyInterface","NavigationInterface","className","Fixer","Navigation","ContentInterface","ContentWrapper","ContentTitle","title","frontmatter","date","MDXProvider","P","h1","H1","h2","H2","h3","H3","h4","H4","h5","H5","h6","H6","hr","ThematicBreak","blockquote","Blockquote","ul","UnorderedList","ol","List","pre","CodeBlock","code","Code","TableInterface","TableFixer","TableOfContent","_styled","target","name","styles","MediaSize","IPAD_PRO","IPAD_AIR","HD","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}