{"componentChunkName":"component---src-components-templates-main-template-tsx-content-file-path-contents-pcac-index-mdx","path":"/0133062d-e2ca-515b-bb58-8ee36a1cbed4","result":{"data":{"mdx":{"id":"0133062d-e2ca-515b-bb58-8ee36a1cbed4","body":"\r\nimport GIF from '@contents/components/GIF';\r\nimport gif02 from './assets/index/02.gif';\r\n\r\n<GIF src={gif02}/>\r\n\r\n# Introduction\r\nHD Map 제작을 위한 Point Cloud 측위 오차 보정 자동화\r\n\r\nMMS(Mobile Mapping System) 장비를 이용하여 수집한 데이터를 센서 캘리브레이션을 통해 고정밀 도로 지도(HD Map)를 제작할 수 있다. 하지만 이 과정에서 동일한 공간을 촬영한 데이터에도 측위 오차가 발생하여 이를 보정해 줄 필요가 있다. HD Corr는 딥 러닝을 이용하여 Point Cloud의 측위 오차를 자동 보정하는 방법을 연구한다.\r\n\r\n2D 이미지 데이터에서 Change Detection이라는 Task와 이를 위한 많은 모델이 존재한다.  이를 변형하여 3D Point Cloud에서 Same Area Detection이라는 Task를 수행한다. 생각처럼 잘 되진 않겠지만 이를 통해 Computer Vision 분야의 경험치를 쌓을 수 있다고 예상한다.\r\n\r\n[repository](https://github.com/yeti-s/PCAC)\r\n\r\n## 기존 보정 방식\r\n![pcd pos error](assets/index/01.png \"서로 다른 시간에 동일한 구간을 촬영한 Point Cloud\")\r\n동일한 공간을 서로 다른 시간에 촬영한 데이터를 보면 IMU 센서에 의한 오차로 인해 point들이 어느정도 차이가 나는 것을 볼 수 있다. 전체 HD Map을 제작하기 위해 이를 Translation과 Interpolation을 통해 데이터를 보정한다.\r\n\r\n## 데이터 선택\r\n도로 노면 정보를 이용하여 측위 오차 보정을 위해 높은 채널수의 라이다 센서를 필요로 한다. 또한 개인으로 진행하는 프로젝트이기 때문에 적당한 볼륨의 데이터를 선택해야 한다. \r\n\r\n* [Apolloscape](https://apolloscape.auto/index.html)\r\n    \r\n    Apolloscape는 Lane Segmentation, Scene Parsing, Detection/Tracking 등 다양한 Task를 위한 데이터셋을 제공하고 있다. 특히 Lane Segmentation 데이터를 활용하여 카메라 이미지에서 Road Marking Segmentation 모델을 학습할 수 있고, 라이다 Projection을 통한 Point Cloud 샘플링을 진행할 수 있다고 예상하였다. 하지만 HD Map 제작을 위한 raw 데이터를 제공하지 않아 센서 캘리브레이션을 수행할 수 없었다.\r\n\r\n* [Nuscene](https://www.nuscenes.org/nuscenes)\r\n    기존 MMS 촬영 장비와 최대한 비슷한 환경을 가진 Nuscene 데이터를 채택했었다. 하지만 라이다의 채널과 카메라의 초당 프레임이 정밀한 지도를 만들기에 충분하지 않다고 판단하였다. 동일 사이트에 Nuplan 이라는 더 많은 센서를 이용해 촬영한 데이터가 존재하는데 개인 프로젝트로 진행하기에는 너무 큰 규모이기 때문에 고려하지 않았다.\r\n\r\n* [Argoverse2](https://www.argoverse.org/av2.html)\r\n    이미 데이터가 어느정도 정제되었지만 Rotation, Translation과 같은 캘리브레이션을 위한 정보도 함께 제공되어 적합하다고 판단하였다. 또한 더 많은 채널의 라이다와 더 높은 초당 카메라 이미지 수를 가지고 있어 Nuscene 보다 더 정밀한 지도를 만들 수 있다고 생각하여 위 데이터를 채택하였다.  \r\n\r\n![nuscene argoverse](assets/index/00.png \"각 데이터셋의 캘리브레이션 된 Potree\")\r\n\r\n## 지리 공간 표시\r\nIMU 정보를 가진 Ego Vehicle 데이터를 이용하여 GeoJSON 형식으로 촬영된 지리 공간을 웹에서 Openlayers API를 활용해 표시할 수 있도록 한다. Ego Vehicle의 Translation 값은 각 도시의 Original 좌표 기준 미터 단위의 Offset을 나타낸다.\r\n\r\n\r\n## 데이터 구조\r\nAV2 데이터셋은 아래 6개의 도시에서 수집되었다.\r\n* Austin, Texas: 31 logs.\r\n* Detroit, Michigan: 117 logs.\r\n* Miami, Florida: 354 logs.\r\n* Pittsburgh, Pennsylvania: 350 logs.\r\n* Palo Alto, California: 22 logs.\r\n* Washington, D.C.: 126 logs.\r\n\r\nAV2의 Sensor 데이터는 아래와 같은 폴더 구조를 가진다\r\n```\r\n|-- Root Directory\r\n    |\r\n    |-- [data id]\r\n    |   |-- annotations.feather\r\n    |   |-- city_SE3_egovehicle.feather\r\n    |   |-- calibration\r\n    |       |-- egovehicle_SE3_sensor.feather\r\n    |       |-- intrinsics.feather\r\n    |   |-- map\r\n    |       |-- [data id]___img_Sim2_city.json\r\n    |       |-- [data id]_ground_height_surface____[city name].npy\r\n    |       |-- log_map_archive_[data id]____[city name]_city_[city id].json\r\n    |   |-- sensors\r\n    |       |-- cameras\r\n    |           |-- ring_front_center\r\n    |               |-- [time_stamp].jpg\r\n    |               |-- ...\r\n    |           |-- ...\r\n    |       |-- lidar\r\n    |           |-- [time_stamp].feather\r\n    |           |-- ...\r\n    |   |-- potree (캘리브레이션을 통해 생성할 데이터)\r\n    |       |-- [data id].las\r\n    |       |-- hierarchy.bin\r\n    |       |-- log.txt\r\n    |       |-- metadata.json\r\n    |       |-- octree.bin\r\n    |-- ...\r\n```\r\n\r\n\r\n\r\n캘리브레이션 하여 생성한 Point Cloud 데이터를 .las 형식의 파일로 저장하고 [Potree](https://github.com/potree/potree)를 이용하여 이를 시각화 할 것이다.\r\n\r\n## 센서 캘리브레이션\r\n\r\n* 라이다 캘리브레이션\r\n\r\n    AV2 데이터셋은 두 개의 32 Channel Lidar를 이용하여 하나의 64 Channel Lidar처럼 사용하였다. Up Lidar와 Down Lidar에 대한 Sensor Calibration을 제공하지만 Point Cloud는 이미 두 Lidar를 융합하여 Ego Vehicle의 좌표계로 변환해 둔 데이터를 제공하기에 쓸 일이 없다.\r\n\r\n* 카메라 캘리브레이션\r\n\r\n\r\n## 개발 파이프라인\r\n* BEV Feature Detection and Matching\r\n    1. Point Cloud의 Bird's Eye View\r\n    2. Feature Detecting\r\n    3. Feature Matching\r\n    4. Metric Learning\r\n* Point Cloud Sampling\r\n    1. Lane Segmentation (on camera)\r\n    2. Lane Point Sampling (by camera projection)\r\n    3. Feature Matching\r\n    4. Metric Learning\r\n* Camera Featrue Matching and Projection\r\n    1. Cam to Cam Projection\r\n    2. Lane Segmentation\r\n    3. Feature Matching\r\n    4. Metric Learning\r\n    5. Projection to Point Cloud\r\n\r\n\r\n\r\n# Citation\r\n```\r\n @INPROCEEDINGS { Argoverse2,\r\n  author = {Benjamin Wilson and William Qi and Tanmay Agarwal and John Lambert and Jagjeet Singh and Siddhesh Khandelwal and Bowen Pan and Ratnesh Kumar and Andrew Hartnett and Jhony Kaesemodel Pontes and Deva Ramanan and Peter Carr and James Hays},\r\n  title = {Argoverse 2: Next Generation Datasets for Self-driving Perception and Forecasting},\r\n  booktitle = {Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks (NeurIPS Datasets and Benchmarks 2021)},\r\n  year = {2021}\r\n}\r\n@INPROCEEDINGS { TrustButVerify,\r\n  author = {John Lambert and James Hays},\r\n  title = {Trust, but Verify: Cross-Modality Fusion for HD Map Change Detection},\r\n  booktitle = {Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks (NeurIPS Datasets and Benchmarks 2021)},\r\n  year = {2021}\r\n}\r\n```","tableOfContents":{"items":[{"url":"#introduction","title":"Introduction","items":[{"url":"#기존-보정-방식","title":"기존 보정 방식"},{"url":"#데이터-선택","title":"데이터 선택"},{"url":"#지리-공간-표시","title":"지리 공간 표시"},{"url":"#데이터-구조","title":"데이터 구조"},{"url":"#센서-캘리브레이션","title":"센서 캘리브레이션"},{"url":"#개발-파이프라인","title":"개발 파이프라인"}]},{"url":"#citation","title":"Citation"}]},"frontmatter":{"description":"Point Cloud Auto Correction","title":"Point Cloud Auto Correction"}},"file":{"modifiedTime":"2023-12-14T20:12:00.866Z"}},"pageContext":{"id":"0133062d-e2ca-515b-bb58-8ee36a1cbed4","relativePath":"pcac/index.mdx","frontmatter":{"title":"Point Cloud Auto Correction","description":"Point Cloud Auto Correction"}}},"staticQueryHashes":["2317542362","3731189812"],"slicesMap":{}}