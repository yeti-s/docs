{"version":3,"file":"component---src-components-templates-main-template-tsx-content-file-path-contents-pill-recognizer-text-reader-mdx-be1cff325ca65693f1d0.js","mappings":"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","sources":["webpack://yeti-docs/./contents/pill_recognizer/text_reader.mdx","webpack://yeti-docs/./src/components/templates/MainTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\",\n    br: \"br\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"초기--개발\"\n  }, \"초기  개발\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"유사도-측정\"\n  }, \"유사도 측정\"), \"\\n\", React.createElement(_components.p, null, \"후보군의 텍스트와 예측한 결과 텍스트의 유사도를 측정하기 위해 두 가지 기준을 사용할 거예요.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Jaccard Similarity : 두 집합 간의 교집합과 합집합의 비율을 계산하여 유사도를 측정하는 방식\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import distance\\r\\nt1 = 'compliment'\\r\\nt2 = 'complement'\\r\\nprint(distance.jaccard(t1, t2)) \\r\\n# output : 0.1111\\r\\nt1 = 'naver'\\r\\nt2 = 'kakao'\\r\\nprint(distance.jaccard(t1, t2)) \\r\\n# output : 0.8571\\r\\nt1 = 'hanyang univ'\\r\\nt2 = 'SNU'\\r\\nprint(distance.jaccard(t1, t2)) \\r\\n# output : 1.0\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Levenshtein Distance : 두 텍스트를 서로 같게 만들기 위해 필요한 최소 편집(삽입, 삭제, 대체)\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import nltk\\r\\nt1 = 'compliment'\\r\\nt2 = 'complement'\\r\\nprint(nltk.edit_distance(t1, t2)) \\r\\n# output : 1\\r\\nt1 = 'naver'\\r\\nt2 = 'kakao'\\r\\nprint(nltk.edit_distance(t1, t2)) \\r\\n# output : 4\\r\\nt1 = 'hanyang univ'\\r\\nt2 = 'SNU'\\r\\nprint(nltk.edit_distance(t1, t2))\\r\\n# output : 12\\n\")), \"\\n\", React.createElement(_components.p, null, \"Jaccard Similarity와 Levenshtein Distance는 두 텍스트가 유사할수록 낮은 값을 가지도록 되어 있어요.\\r\\n하지만 Levenshtein Distance는 하나의 텍스트가 길면 길수록 한없이 커진답니다.\\r\\n그래서 우리는 길이가 더 긴 텍스트 쪽으로 normalization을 해 줄 것입니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def normed_leven_dist(t1, t2):\\r\\n    max_size = max(len(t1), len(t2))\\r\\n    return nltk.edit_distance(t1, t2) / max_size\\r\\n\\r\\nprint(normed_leven_dist('compliment', 'complement')) \\r\\n# output : 0.1\\r\\nprint(normed_leven_dist('naver', 'kakao')) \\r\\n# output : 0.8\\r\\nprint(normed_leven_dist('hanyang univ', 'SNU')) \\r\\n# output : 1.0\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 두 값을 모두 사용하기 때문에 두 값을 곱해서 확률로 만들어 줍시다.\\r\\n우리가 원하는 것은 유사도를 얻는 것이기에 유사성이 높을수록 1에 가까워야 맞겠죠?\\r\\n곱한 결과를 1에서 빼주는 형태로 구현하면 되겠네요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def get_similarity(t1, t2):\\r\\n    max_len = max(len(t1), len(t2))\\r\\n    leven_dist = nltk.edit_distance(t1, t2) / max_len\\r\\n    jaccard_sim = distance.jaccard(t1, t2)\\r\\n    return 1 - leven_dist * jaccard_sim\\r\\n\\r\\nprint(get_similarity('compliment', 'complement')) \\r\\n# output : 0.9888\\r\\nprint(get_similarity('naver', 'kakao')) \\r\\n# output : 0.31428\\r\\nprint(get_similarity('hanyang univ', 'SNU')) \\r\\n# output : 0.0\\n\")), \"\\n\", React.createElement(_components.p, null, \"사실 위 두 함수는 구현하는 것이 어렵지 않고 제가 의존성을 추가하는 것을 별로 좋아하지 않지만,\\r\\n많은 후보군과 비교를 위해서 최적화가 되어있는 라이브러리를 사용했어요.\\r\\n뭐 최적화가 잘 되어 있는지는 나중에 비교를 해보는 것으로 하죠.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"학습\"\n  }, \"학습\"), \"\\n\", React.createElement(_components.p, null, \"학습 데이터를 생성하기 위해서 \", React.createElement(_components.a, {\n    href: \"https://github.com/clovaai/deep-text-recognition-benchmark\"\n  }, \"deep-text-recognition-benchmark\"), \" 레포를 따를 것입니다.\", React.createElement(_components.br), \"\\n\", \"일단 위 레포를 clone 합시다!\"), \"\\n\", React.createElement(_components.p, null, \"먼저 우리는 아래와 같은 폴더 구조로 데이터를 가지고 있어요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"|-- data\\r\\n|   |-- train\\r\\n|       |-- gt.txt\\r\\n|       |-- boxes\\r\\n|           |-- 200900695_0.jpg\\r\\n|           |-- ...\\r\\n|   |-- val\\r\\n|       |-- gt.txt\\r\\n|       |-- boxes\\r\\n|           |-- 195900027_0.jpg\\r\\n|           |-- ...\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# gt.txt\\r\\n200900695_0.jpg\\tAL\\r\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"자 이제 deep-text-recognition-benchmark/create_lmdb_dataset.py 코드를 통해 데이터셋을 생성할 거예요.\\r\\n그런데 create_lmdb_dataset.py 코드에서 약간 수정할 부분이 있어요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"# create_lmdb_dataset.py\\r\\ndef createDataset(inputPath, gtFile, outputPath, checkValid=True):\\r\\n    \\\"\\\"\\\"\\r\\n    Create LMDB dataset for training and evaluation.\\r\\n    ARGS:\\r\\n        inputPath  : input folder path where starts imagePath\\r\\n        outputPath : LMDB output path\\r\\n        gtFile     : list of image path and label\\r\\n        checkValid : if true, check the validity of every image\\r\\n    \\\"\\\"\\\"\\r\\n    os.makedirs(outputPath, exist_ok=True)\\r\\n    env = lmdb.open(outputPath, map_size=1024000000) # <- 여기서 map size를 데이터 크기에 따라 조절 하세요!\\r\\n    cache = {}\\r\\n    cnt = 1\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 train, val 데이터로 학습에 사용할 lmdb 데이터를 생성합시다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"$ python deep-text-recognition-benchmark/create_lmdb_dataset.py --inputPath data/train/boxes --gtFile data/train/gt.txt --outputPath data/train/lmdb\\r\\n$ python deep-text-recognition-benchmark/create_lmdb_dataset.py --inputPath data/val/boxes --gtFile data/val/gt.txt --outputPath data/val/lmdb\\n\")), \"\\n\", React.createElement(_components.p, null, \"자 lmdb 데이터도 생성이 되었겠다, 학습을 시작합니다.\\r\\n여러가지 파라미터들이 존재하는데 모델에 관련한 몇몇 파라미터와 예측에 사용할 문자들을 한정해주어 학습을 진행할 거예요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"python deep-text-recognition-benchmark/train.py --train_data data/train/lmdb --valid_data data/val/lmdb --Transformation TPS --FeatureExtraction ResNet --SequenceModeling BiLSTM --Prediction Attn --select_data '/' --batch_ratio 1 --workers 0 --batch_size 128 --character '&+-./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghiklmnoprstuvwxyz'\\n\")), \"\\n\", React.createElement(_components.p, null, \"폴더가 하나 새로 생겼죠?\\r\\n로그도 있고 best_accuracy.pth, best_norm_ED.pth가 있어요.\\r\\nnorm_ED는 normalized edit distance라고 하네요.\\r\\n위에서 사용했던 'Levenshtein Distance'의 normalized 버전이 아닐까 생각이 듭니다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"테스트\"\n  }, \"테스트\"), \"\\n\", React.createElement(_components.p, null, \"이제 학습된 모델을 불러와서 추론하는 것을 살펴봅시다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import easyocr\\r\\nimport matplotlib.pyplot as plt\\r\\n\\r\\ndef show_img(img_path):\\r\\n    plt.imshow(plt.imread(img_path))\\r\\n    plt.axis('off')  # Optional: to hide the axis\\r\\n    plt.show()\\r\\n\\r\\nimg_path = '196000001_0.jpg'\\r\\nshow_img(img_path)\\r\\n\\r\\nreader = easyocr.Reader(['en'], user_network_directory='../data')\\r\\nprint(reader.readtext(img_path))\\n\")), \"\\n\", React.createElement(_components.p, null, \"'196000001_0.jpg' 이미지에 대해 텍스트 인식을 해보았어요.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"assets/text_reader/01.png\",\n    alt: \"196000001_0\"\n  }), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[([[97, 61], [217, 61], [217, 97], [97, 97]], 'PSCK', 0.9858795404434204), ([[118, 90], [194, 90], [194, 122], [118, 122]], '500', 0.9943707547542567)]\\n\")), \"\\n\", React.createElement(_components.p, null, \"위와 같이 리스트의 형태로 위치, 텍스트, 그리고 score가 함께 나오네요.\\r\\n우리에게 필요한 것은 텍스트와 score!\\r\\nscore가 0.1만 되어도 정확하지 않지만 비슷한 모양의 텍스트가 나오더라구요.\\r\\n그래서 일정 threshold 이상의 score가 나오면 결과에 포함시키는 형태로 모듈을 구현해 보았습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"# text_reader.py\\r\\nimport easyocr\\r\\n\\r\\nclass TextReader():\\r\\n    def __init__(self, model_path, threshold=0.1) -> None:\\r\\n        self.reader = easyocr.Reader(['en'], user_network_directory=model_path)\\r\\n        self.threshold = threshold\\r\\n        \\r\\n    def read(self, img):\\r\\n        text = ''\\r\\n        results = self.reader.readtext(img)\\r\\n        for result in results:\\r\\n            pred = result[1]\\r\\n            conf = result[2]\\r\\n            if conf > self.threshold:\\r\\n                text += pred\\r\\n        return text\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 위 모듈을 이용하여 정확도를 평가할 생각입니다.\\r\\n우리는 인식할 문자를 어느정도 한정하여 학습을 진행했지만, 사실 프린팅된 텍스트가 아닌 문자를 정확하게 인식하는 것은 쉽지 않습니다.\\r\\n그래서 예측한 텍스트와 정확히 일치하는 알약을 찾는 방법이 아닌, 다른 특징들로 좁혀진 후보군 중 가장 유사한 텍스트를 가진 알약을 선정하는 방법으로 접근할 거예요.\\r\\n텍스트 인식 모듈 단일 테스트기 때문에 색, 모양은 테스트 하려는 알약의 데이터를 그대로 사용하고 텍스트만 예측한 값을 사용하는 식으로 진행할게요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def predict_by_feats(db, shape, color, text, k=5):\\r\\n    candidates = db[db['의약품제형']==shape]\\r\\n    candidates = candidates[(candidates['색상앞']==color) | (candidates['색상뒤']==color)]\\r\\n    \\r\\n    cand_probs = []\\r\\n    for _, row in candidates.iterrows():\\r\\n        text_front = preprocess_text(row['표시앞'])\\r\\n        text_back = preprocess_text(row['표시뒤'])\\r\\n        cand_probs.append(max(get_similarity(text_front, text), get_similarity(text_back, text)))\\r\\n    \\r\\n    cand_probs = np.array(cand_probs)\\r\\n    best_idx = cand_probs.argmax()\\r\\n    return candidates.iloc[best_idx]['품목일련번호']\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 만들어서 테스트를 해보았더니, 결과가 처참하더라구요.\\r\\n나름대로 원인을 좀 분석해보니 아래와 같은 문제점이 보였습니다/\"), \"\\n\", React.createElement(_components.img, {\n    src: \"assets/text_reader/00.png\",\n    alt: \"same feats\"\n  }), \"\\n\", React.createElement(_components.p, null, \"위 두 알약은 모양도, 색도, 텍스트도 동일해요.\\r\\n사람의 눈으로 자세히 보면 비교할 수 있지만, 우리가 가진 특징 만으로 컴퓨터가 판단하긴 어려워 보여요.\\r\\n그래서 하나의 결과만 던져주는 방법이 아닌, 가장 근접한 N개의 결과를 던져주고 유저가 자신의 알약과 가장 비슷한 약을 고르도록 가이드를 제시할 거예요.\\r\\n그렇기 때문에 우리는 텍스트 인식 모듈의 정확도를 측정할 때, N개의 결과 중에 답이 존재한다면 옳은 예측이라 판단합시다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def predict_by_feats(db, shape, color, text, k=5):\\r\\n    candidates = db[db['의약품제형']==shape]\\r\\n    candidates = candidates[(candidates['색상앞']==color) | (candidates['색상뒤']==color)]\\r\\n    \\r\\n    cand_probs = []\\r\\n    for _, row in candidates.iterrows():\\r\\n        text_front = preprocess_text(row['표시앞'])\\r\\n        text_back = preprocess_text(row['표시뒤'])\\r\\n        cand_probs.append(max(get_similarity(text_front, text), get_similarity(text_back, text)))\\r\\n    \\r\\n    cand_probs = np.array(cand_probs)\\r\\n    top_k = cand_probs.argsort()[-k:]\\r\\n    results = [candidates.iloc[i]['품목일련번호'] for i in top_k]\\r\\n    return results\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"valid predictions: 317, num data: 751, accuracy: 42.2103861517976\\n\")), \"\\n\", React.createElement(_components.p, null, \"Top N개를 선정하는 방식도 정확도가 그리 좋지만은 않네요.\\r\\n아마 텍스트간 유사성을 구하는 부분에서 문제가 있는 것 같아요.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"print(get_similarity('atlck', 'at|ck'))\\r\\nprint(get_similarity('atck', 'at|ck'))\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"0.93\\r\\n0.96\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 예시를 보면 첫 번째 경우는 '|'과 'l'을 단순히 잘못 예측한 경우에요.\\r\\n두 문자는 자세히 보지 않으면 실제 세상에서도 다르지 않아 보일 정도로 유사합니다.\\r\\n그래서 두 번째 경우처럼 아예 '|'를 인식하지 못하는 경우보다 점수가 더 높아야 한다고 생각해요.\\r\\n하지만 우리가 구현한 방식은 두 번째 경우를 더 높은 확률로 인식하였네요.\\r\\n어쩌면 모듈을 개선하는 방법은 더 정밀한 모델을 만드는 방법 보다 뛰어난 유사성 알고리즘을 찾는 것이,\\r\\n큰 차이로 성능을 높일 수 있을 것 같아요.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/yeti/Documents/github/docs/contents/pill_recognizer/text_reader.mdx\";\nimport _styled from \"@emotion/styled/base\";\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n  return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\nimport React, {useEffect} from \"react\";\nimport Layout from \"@src/Layout\";\nimport Navigation from \"@src/components/organisms/navigation/Navigation\";\nimport TableOfContent from \"@src/components/organisms/toc/TableOfContent\";\nimport Header from \"@src/components/organisms/header/Header\";\nimport ContentTitle from \"@src/components/organisms/content/ContentTitle\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport {createAtom, TOGGLE_WIDE, TOGGLE_NAV, SET_TABLE_OF_CONTENT} from \"@src/context/atoms\";\nimport MediaSize from \"@src/styles/media\";\nimport 'katex/dist/katex.min.css';\nimport P from \"@src/components/mdx/Paragraph\";\nimport {H1, H2, H3, H4, H5, H6} from \"@src/components/mdx/Heading\";\nimport ThematicBreak from \"@src/components/mdx/ThematicBreak\";\nimport Blockquote from \"@src/components/mdx/Blockquote\";\nimport List from \"@src/components/mdx/List\";\nimport UnorderedList from \"@src/components/mdx/UnorderedList\";\nimport CodeBlock from \"@src/components/mdx/CodeBlock\";\nimport Code from \"@src/components/mdx/Code\";\nimport {jsx as ___EmotionJSX} from \"@emotion/react\";\nconst MainTemplate = _ref => {\n  let {data: {mdx}, children} = _ref;\n  const isWide = useRecoilValue(createAtom(TOGGLE_WIDE, false));\n  const isNavOpened = useRecoilValue(createAtom(TOGGLE_NAV, false));\n  const tocSetter = useSetRecoilState(createAtom(SET_TABLE_OF_CONTENT, mdx.tableOfContents.items));\n  useEffect(() => {\n    tocSetter(mdx.tableOfContents.items);\n  }, [mdx]);\n  return ___EmotionJSX(Layout, null, ___EmotionJSX(HeaderInterface, null, ___EmotionJSX(Header, null)), ___EmotionJSX(BodyInterface, null, ___EmotionJSX(NavigationInterface, {\n    className: \"navigation\",\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(Fixer, {\n    className: \"hide_scroll\"\n  }, ___EmotionJSX(Navigation, null))), ___EmotionJSX(ContentInterface, {\n    isNavOpened: isNavOpened\n  }, ___EmotionJSX(ContentWrapper, {\n    isWide: isWide\n  }, ___EmotionJSX(ContentTitle, {\n    title: mdx.frontmatter.title,\n    date: mdx.frontmatter.date\n  }), ___EmotionJSX(MDXProvider, {\n    components: {\n      p: P,\n      h1: H1,\n      h2: H2,\n      h3: H3,\n      h4: H4,\n      h5: H5,\n      h6: H6,\n      hr: ThematicBreak,\n      blockquote: Blockquote,\n      ul: UnorderedList,\n      ol: List,\n      pre: CodeBlock,\n      code: Code\n    }\n  }, children))), ___EmotionJSX(TableInterface, null, ___EmotionJSX(TableFixer, null, ___EmotionJSX(TableOfContent, null)))));\n};\nconst query = \"1875222860\";\nconst HeaderInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j7\"\n} : {\n  target: \"e1ojob7j7\",\n  label: \"HeaderInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\"\n} : {\n  name: \"11t2x7x\",\n  styles: \"display:flex;height:var(--header-height);z-index:5;padding:0.6rem 2rem 0.6rem 0.6rem;position:fixed;width:100%;background:var(--background-color);border-bottom:1px solid var(--border-color)\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst BodyInterface = _styled(\"div\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j6\"\n} : {\n  target: \"e1ojob7j6\",\n  label: \"BodyInterface\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\"\n} : {\n  name: \"majwgz\",\n  styles: \"position:relative;display:flex;min-height:calc(100vh - var(--header-height));overflow-x:hidden\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst NavigationInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j5\"\n} : {\n  target: \"e1ojob7j5\",\n  label: \"NavigationInterface\"\n})(\"margin-left:\", p => p.isNavOpened ? '0' : 'calc(-1 * var(--sidebar-width))', \";flex:0 0 var(--sidebar-width);font-size:0.875rem;overflow-x:hidden;overflow-y:auto;transition:margin 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.IPAD_PRO, \"px){margin-left:0;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst Fixer = _styled(\"nav\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j4\"\n} : {\n  target: \"e1ojob7j4\",\n  label: \"Fixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\"\n} : {\n  name: \"l4vzaw\",\n  styles: \"overflow-y:auto;height:100%;padding:var(--body-padding-top) 0 3rem 0;position:fixed;width:var(--sidebar-width);&:-webkit-scrollbar{display:none;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xceWV0aVxcRG9jdW1lbnRzXFxnaXRodWJcXGRvY3NcXHNyY1xcY29tcG9uZW50c1xcdGVtcGxhdGVzXFxNYWluVGVtcGxhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1Kd0IiLCJmaWxlIjoiQzpcXFVzZXJzXFx5ZXRpXFxEb2N1bWVudHNcXGdpdGh1YlxcZG9jc1xcc3JjXFxjb21wb25lbnRzXFx0ZW1wbGF0ZXNcXE1haW5UZW1wbGF0ZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5cclxuaW1wb3J0IExheW91dCBmcm9tIFwiQHNyYy9MYXlvdXRcIjtcclxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBUYWJsZU9mQ29udGVudCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy90b2MvVGFibGVPZkNvbnRlbnRcIjtcclxuaW1wb3J0IEhlYWRlciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL29yZ2FuaXNtcy9oZWFkZXIvSGVhZGVyXCI7XHJcbmltcG9ydCBDb250ZW50VGl0bGUgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvY29udGVudC9Db250ZW50VGl0bGVcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgUGFnZVByb3BzIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSBcImdhdHNieVwiO1xyXG5pbXBvcnQgeyBNRFhQcm92aWRlciB9IGZyb20gXCJAbWR4LWpzL3JlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXRvbSwgVE9HR0xFX1dJREUsIFRPR0dMRV9OQVYsIFNFVF9UQUJMRV9PRl9DT05URU5UIH0gZnJvbSBcIkBzcmMvY29udGV4dC9hdG9tc1wiO1xyXG5pbXBvcnQgTWVkaWFTaXplIGZyb20gXCJAc3JjL3N0eWxlcy9tZWRpYVwiO1xyXG5pbXBvcnQgJ2thdGV4L2Rpc3Qva2F0ZXgubWluLmNzcydcclxuXHJcbi8qIC0tLWN1c3RvbSBNRFggY29tcG9uZW50cy0tLSAqL1xyXG5pbXBvcnQgUCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9QYXJhZ3JhcGhcIjtcclxuaW1wb3J0IHsgSDEsIEgyLCBIMywgSDQsIEg1LCBINiB9IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L0hlYWRpbmdcIjtcclxuaW1wb3J0IFRoZW1hdGljQnJlYWsgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvVGhlbWF0aWNCcmVha1wiO1xyXG5pbXBvcnQgQmxvY2txdW90ZSBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9CbG9ja3F1b3RlXCI7XHJcbmltcG9ydCBMaXN0IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L0xpc3RcIjtcclxuaW1wb3J0IFVub3JkZXJlZExpc3QgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9tZHgvVW5vcmRlcmVkTGlzdFwiO1xyXG5pbXBvcnQgQ29kZUJsb2NrIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvbWR4L0NvZGVCbG9ja1wiO1xyXG5pbXBvcnQgQ29kZSBmcm9tIFwiQHNyYy9jb21wb25lbnRzL21keC9Db2RlXCI7XHJcblxyXG5cclxudHlwZSBJdGVtID0ge1xyXG4gICAgdXJsOnN0cmluZyxcclxuICAgIHRpdGxlOnN0cmluZyxcclxuICAgIGluZGV4PzpudW1iZXIsXHJcbiAgICBkZXB0aD86bnVtYmVyXHJcbiAgICBpdGVtcz86QXJyYXk8SXRlbT5cclxufTtcclxuXHJcbnR5cGUgUXVlcnlQcm9wcyA9IHtcclxuICAgIG1keDoge1xyXG4gICAgICAgIGlkOiBzdHJpbmcsXHJcbiAgICAgICAgZnJvbnRtYXR0ZXI6IHtcclxuICAgICAgICAgICAgdGl0bGU6IHN0cmluZyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgICAgICAgICAgZGF0ZTogc3RyaW5nXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YWJsZU9mQ29udGVudHM6IHtcclxuICAgICAgICAgICAgaXRlbXM6IEFycmF5PEl0ZW0+XHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBzdHJpbmdcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgTWFpblRlbXBsYXRlID0gKHsgZGF0YTogeyBtZHggfSwgY2hpbGRyZW4gfTogUGFnZVByb3BzPFF1ZXJ5UHJvcHM+KSA9PiB7XHJcbiAgICBjb25zdCBpc1dpZGUgPSB1c2VSZWNvaWxWYWx1ZShjcmVhdGVBdG9tKFRPR0dMRV9XSURFLCBmYWxzZSkpO1xyXG4gICAgY29uc3QgaXNOYXZPcGVuZWQgPSB1c2VSZWNvaWxWYWx1ZShjcmVhdGVBdG9tKFRPR0dMRV9OQVYsIGZhbHNlKSk7XHJcbiAgICBjb25zdCB0b2NTZXR0ZXIgPSB1c2VTZXRSZWNvaWxTdGF0ZShjcmVhdGVBdG9tKFNFVF9UQUJMRV9PRl9DT05URU5ULCBtZHgudGFibGVPZkNvbnRlbnRzLml0ZW1zKSk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICB0b2NTZXR0ZXIobWR4LnRhYmxlT2ZDb250ZW50cy5pdGVtcyk7XHJcbiAgICB9LCBbbWR4XSlcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxMYXlvdXQ+XHJcbiAgICAgICAgICAgIDxIZWFkZXJJbnRlcmZhY2U+XHJcbiAgICAgICAgICAgICAgICA8SGVhZGVyLz5cclxuICAgICAgICAgICAgPC9IZWFkZXJJbnRlcmZhY2U+XHJcbiAgICAgICAgICAgIDxCb2R5SW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPE5hdmlnYXRpb25JbnRlcmZhY2UgY2xhc3NOYW1lPVwibmF2aWdhdGlvblwiIGlzTmF2T3BlbmVkPXtpc05hdk9wZW5lZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEZpeGVyIGNsYXNzTmFtZT1cImhpZGVfc2Nyb2xsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0ZpeGVyPlxyXG4gICAgICAgICAgICAgICAgPC9OYXZpZ2F0aW9uSW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPENvbnRlbnRJbnRlcmZhY2UgaXNOYXZPcGVuZWQ9e2lzTmF2T3BlbmVkfT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29udGVudFdyYXBwZXIgaXNXaWRlPXtpc1dpZGV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29udGVudFRpdGxlIHRpdGxlPXttZHguZnJvbnRtYXR0ZXIudGl0bGV9IGRhdGU9e21keC5mcm9udG1hdHRlci5kYXRlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNRFhQcm92aWRlciBjb21wb25lbnRzPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwOiBQLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDE6IEgxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDI6IEgyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDM6IEgzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDQ6IEg0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDU6IEg1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDY6IEg2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHI6IFRoZW1hdGljQnJlYWssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3F1b3RlOiBCbG9ja3F1b3RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdWw6IFVub3JkZXJlZExpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbDogTGlzdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZTogQ29kZUJsb2NrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogQ29kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9NRFhQcm92aWRlcj5cclxuICAgICAgICAgICAgICAgICAgICA8L0NvbnRlbnRXcmFwcGVyPlxyXG4gICAgICAgICAgICAgICAgPC9Db250ZW50SW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgPFRhYmxlSW50ZXJmYWNlPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZUZpeGVyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVPZkNvbnRlbnQvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGFibGVGaXhlcj5cclxuICAgICAgICAgICAgICAgIDwvVGFibGVJbnRlcmZhY2U+XHJcbiAgICAgICAgICAgIDwvQm9keUludGVyZmFjZT5cclxuICAgICAgICA8L0xheW91dD5cclxuICAgIClcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBxdWVyeSA9IGdyYXBocWxgXHJcbnF1ZXJ5KCRpZDogU3RyaW5nISkge1xyXG4gICAgbWR4KGlkOiB7ZXE6ICRpZH0pIHtcclxuICAgICAgICBpZFxyXG4gICAgICAgIGJvZHlcclxuICAgICAgICB0YWJsZU9mQ29udGVudHMobWF4RGVwdGg6IDIpXHJcbiAgICAgICAgZnJvbnRtYXR0ZXIge1xyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgICAgIHRpdGxlXHJcbiAgICAgICAgICAgICAgICBkYXRlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59YDtcclxuXHJcbmNvbnN0IEhlYWRlckludGVyZmFjZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1oZWFkZXItaGVpZ2h0KTtcclxuICAgIHotaW5kZXg6IDU7XHJcbiAgICBwYWRkaW5nOiAwLjZyZW0gMnJlbSAwLjZyZW0gMC42cmVtO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpO1xyXG5gO1xyXG5cclxuY29uc3QgQm9keUludGVyZmFjZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIHZhcigtLWhlYWRlci1oZWlnaHQpKTtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuYDtcclxuXHJcbmNvbnN0IE5hdmlnYXRpb25JbnRlcmZhY2UgPSBzdHlsZWQuYXNpZGU8e2lzTmF2T3BlbmVkPzpib29sZWFufT5gXHJcbiAgICBtYXJnaW4tbGVmdDogJHtwPT5wLmlzTmF2T3BlbmVkID8gJzAnIDogJ2NhbGMoLTEgKiB2YXIoLS1zaWRlYmFyLXdpZHRoKSknfTtcclxuICAgIGZsZXg6IDAgMCB2YXIoLS1zaWRlYmFyLXdpZHRoKTtcclxuICAgIGZvbnQtc2l6ZTogMC44NzVyZW07XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgdHJhbnNpdGlvbjogbWFyZ2luIDAuMjVzIHZhcigtLWVhc2UtaW4tb3V0LXF1YWQpO1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICR7TWVkaWFTaXplLklQQURfUFJPfXB4KSB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBGaXhlciA9IHN0eWxlZC5uYXZgXHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgcGFkZGluZzogdmFyKC0tYm9keS1wYWRkaW5nLXRvcCkgMCAzcmVtIDA7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB3aWR0aDogdmFyKC0tc2lkZWJhci13aWR0aCk7XHJcbiAgICAmOi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG5gXHJcblxyXG5cclxuY29uc3QgQ29udGVudFdyYXBwZXIgPSBzdHlsZWQubWFpbjx7aXNXaWRlOiBib29sZWFuIH0+YFxyXG4gICAgcGFkZGluZzogMXJlbTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICR7TWVkaWFTaXplLklQQURfQUlSfXB4KSB7XHJcbiAgICAgICAgd2lkdGg6ICR7cD0+cC5pc1dpZGU/ICc5MCUnIDogJzY1JSd9O1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29udGVudEludGVyZmFjZSA9IHN0eWxlZC5tYWluPHtpc05hdk9wZW5lZD86IGJvb2xlYW59PmBcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyICogdmFyKC0tc2lkZWJhci13aWR0aCkpO1xyXG4gICAgcGFkZGluZy10b3A6IHZhcigtLWJvZHktcGFkZGluZy10b3ApO1xyXG4gICAgZmxleC1ncm93OiAxO1xyXG4gICAgbWluLXdpZHRoOiAyMHJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIG9wYWNpdHk6ICR7cCA9PiAocC5pc05hdk9wZW5lZCA/IDAuMyA6IDEpfTtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke01lZGlhU2l6ZS5JUEFEX1BST31weCkge1xyXG4gICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5cclxuY29uc3QgVGFibGVJbnRlcmZhY2UgPSBzdHlsZWQuYXNpZGVgXHJcbiAgICBmb250LXNpemU6IDAuNzVyZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgICBwYWRkaW5nLXRvcDogdmFyKC0tYm9keS1wYWRkaW5nLXRvcCk7XHJcbiAgICB3aWR0aDogMDtcclxuICAgIHRyYW5zaXRpb246IHdpZHRoIDAuMjVzIHZhcigtLWVhc2UtaW4tb3V0LXF1YWQpO1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICR7TWVkaWFTaXplLkhEfXB4KSB7XHJcbiAgICAgICAgd2lkdGg6IHZhcigtLXNpZGViYXItd2lkdGgpO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgVGFibGVGaXhlciA9IHN0eWxlZChGaXhlcilgXHJcbiAgICBwYWRkaW5nOiAwIDFyZW0gMCAxcmVtO1xyXG5gXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFpblRlbXBsYXRlOyJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst ContentWrapper = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j3\"\n} : {\n  target: \"e1ojob7j3\",\n  label: \"ContentWrapper\"\n})(\"padding:1rem;width:100%;@media (min-width: \", MediaSize.IPAD_AIR, \"px){width:\", p => p.isWide ? '90%' : '65%', \";}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst ContentInterface = _styled(\"main\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j2\"\n} : {\n  target: \"e1ojob7j2\",\n  label: \"ContentInterface\"\n})(\"width:calc(100% - 2 * var(--sidebar-width));padding-top:var(--body-padding-top);flex-grow:1;min-width:20rem;display:flex;justify-content:center;opacity:\", p => p.isNavOpened ? 0.3 : 1, \";@media (min-width: \", MediaSize.IPAD_PRO, \"px){opacity:1;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst TableInterface = _styled(\"aside\", process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j1\"\n} : {\n  target: \"e1ojob7j1\",\n  label: \"TableInterface\"\n})(\"font-size:0.75rem;font-weight:bold;overflow-x:hidden;overflow-y:auto;padding-top:var(--body-padding-top);width:0;transition:width 0.25s var(--ease-in-out-quad);@media (min-width: \", MediaSize.HD, \"px){width:var(--sidebar-width);}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nconst TableFixer = _styled(Fixer, process.env.NODE_ENV === \"production\" ? {\n  target: \"e1ojob7j0\"\n} : {\n  target: \"e1ojob7j0\",\n  label: \"TableFixer\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\"\n} : {\n  name: \"b40oxt\",\n  styles: \"padding:0 1rem 0 1rem\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nMainTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(MainTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h2","p","ul","li","pre","code","a","br","img","_provideComponents","components","React","id","className","href","src","alt","wrapper","MDXLayout","MainTemplate","_ref","data","mdx","children","isWide","useRecoilValue","createAtom","TOGGLE_WIDE","isNavOpened","TOGGLE_NAV","tocSetter","useSetRecoilState","SET_TABLE_OF_CONTENT","tableOfContents","items","useEffect","___EmotionJSX","Layout","HeaderInterface","Header","BodyInterface","NavigationInterface","Fixer","Navigation","ContentInterface","ContentWrapper","ContentTitle","title","frontmatter","date","MDXProvider","P","H1","H2","h3","H3","h4","H4","h5","H5","h6","H6","hr","ThematicBreak","blockquote","Blockquote","UnorderedList","ol","List","CodeBlock","Code","TableInterface","TableFixer","TableOfContent","_styled","target","name","styles","MediaSize","IPAD_PRO","IPAD_AIR","HD","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}